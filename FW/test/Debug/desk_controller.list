
desk_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  000201c0  2**0
                  CONTENTS
  4 .ARM          00000000  08003f50  08003f50  000201c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f50  08003f50  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  08003f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  200001c0  08004118  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08004118  0002085c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc48  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6e  00000000  00000000  0002ce30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002f568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001775  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db2f  00000000  00000000  000317fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005feb7  00000000  00000000  0003f32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009f1e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  0009f234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c0 	.word	0x200001c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f00 	.word	0x08003f00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c4 	.word	0x200001c4
 8000104:	08003f00 	.word	0x08003f00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t temp = 0;
uint8_t r = 0;
uint8_t g = 0;
uint8_t b = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 800022a:	210c      	movs	r1, #12
 800022c:	0018      	movs	r0, r3
 800022e:	f002 f90b 	bl	8002448 <HAL_TIM_PWM_Stop_DMA>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	b002      	add	sp, #8
 8000238:	bd80      	pop	{r7, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	200001dc 	.word	0x200001dc

08000240 <updateRGBStrip>:

void updateRGBStrip() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0

	for (int j = 0; j < LEDTOT * 3; j += 3) {
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	e04b      	b.n	80002e4 <updateRGBStrip+0xa4>
		r = rgbDataInt[j];
 800024c:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <updateRGBStrip+0xc0>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	18d3      	adds	r3, r2, r3
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4b2b      	ldr	r3, [pc, #172]	; (8000304 <updateRGBStrip+0xc4>)
 8000256:	701a      	strb	r2, [r3, #0]
		g = rgbDataInt[j + 1];
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	4a28      	ldr	r2, [pc, #160]	; (8000300 <updateRGBStrip+0xc0>)
 800025e:	5cd2      	ldrb	r2, [r2, r3]
 8000260:	4b29      	ldr	r3, [pc, #164]	; (8000308 <updateRGBStrip+0xc8>)
 8000262:	701a      	strb	r2, [r3, #0]
		b = rgbDataInt[j + 2];
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3302      	adds	r3, #2
 8000268:	4a25      	ldr	r2, [pc, #148]	; (8000300 <updateRGBStrip+0xc0>)
 800026a:	5cd2      	ldrb	r2, [r2, r3]
 800026c:	4b27      	ldr	r3, [pc, #156]	; (800030c <updateRGBStrip+0xcc>)
 800026e:	701a      	strb	r2, [r3, #0]
		temp = 0; // needed?
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <updateRGBStrip+0xd0>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
		temp = (g << 16) | (r << 8) | b;
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <updateRGBStrip+0xc8>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	041a      	lsls	r2, r3, #16
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <updateRGBStrip+0xc4>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	021b      	lsls	r3, r3, #8
 8000282:	4313      	orrs	r3, r2
 8000284:	4a21      	ldr	r2, [pc, #132]	; (800030c <updateRGBStrip+0xcc>)
 8000286:	7812      	ldrb	r2, [r2, #0]
 8000288:	4313      	orrs	r3, r2
 800028a:	001a      	movs	r2, r3
 800028c:	4b20      	ldr	r3, [pc, #128]	; (8000310 <updateRGBStrip+0xd0>)
 800028e:	601a      	str	r2, [r3, #0]
		for (int i = 23; i >= 0; i -= 1) {
 8000290:	2317      	movs	r3, #23
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	e020      	b.n	80002d8 <updateRGBStrip+0x98>
			if (temp & (1 << i)) {
 8000296:	2201      	movs	r2, #1
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	409a      	lsls	r2, r3
 800029c:	0013      	movs	r3, r2
 800029e:	001a      	movs	r2, r3
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <updateRGBStrip+0xd0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4013      	ands	r3, r2
 80002a6:	d007      	beq.n	80002b8 <updateRGBStrip+0x78>
				pwmData[i] = pwm_high_period;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <updateRGBStrip+0xd4>)
 80002aa:	7819      	ldrb	r1, [r3, #0]
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <updateRGBStrip+0xd8>)
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	18d3      	adds	r3, r2, r3
 80002b2:	1c0a      	adds	r2, r1, #0
 80002b4:	701a      	strb	r2, [r3, #0]
 80002b6:	e006      	b.n	80002c6 <updateRGBStrip+0x86>
			} else {
				pwmData[i] = pwm_low_period;
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <updateRGBStrip+0xdc>)
 80002ba:	7819      	ldrb	r1, [r3, #0]
 80002bc:	4a16      	ldr	r2, [pc, #88]	; (8000318 <updateRGBStrip+0xd8>)
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	18d3      	adds	r3, r2, r3
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	701a      	strb	r2, [r3, #0]
			}

			HAL_GPIO_TogglePin(LED_ACTIVITY_GPIO_Port, LED_ACTIVITY_Pin);
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2102      	movs	r1, #2
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f918 	bl	8001502 <HAL_GPIO_TogglePin>
		for (int i = 23; i >= 0; i -= 1) {
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	dadb      	bge.n	8000296 <updateRGBStrip+0x56>
	for (int j = 0; j < LEDTOT * 3; j += 3) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3303      	adds	r3, #3
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b89      	cmp	r3, #137	; 0x89
 80002e8:	ddb0      	ble.n	800024c <updateRGBStrip+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*) pwmData,
 80002ea:	238a      	movs	r3, #138	; 0x8a
 80002ec:	00db      	lsls	r3, r3, #3
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <updateRGBStrip+0xd8>)
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <updateRGBStrip+0xe0>)
 80002f2:	210c      	movs	r1, #12
 80002f4:	f001 ff04 	bl	8002100 <HAL_TIM_PWM_Start_DMA>
	LEDTOT * 24);

	//delay(TRESET) TODO
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b002      	add	sp, #8
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000374 	.word	0x20000374
 8000304:	20000854 	.word	0x20000854
 8000308:	20000855 	.word	0x20000855
 800030c:	20000856 	.word	0x20000856
 8000310:	20000850 	.word	0x20000850
 8000314:	200001b2 	.word	0x200001b2
 8000318:	20000400 	.word	0x20000400
 800031c:	200001b3 	.word	0x200001b3
 8000320:	200001dc 	.word	0x200001dc

08000324 <parseRGBData>:

void parseRGBData() {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0

	// decodes rgb values from char to int
	for (int i = 0; i < LEDTOT * 3 * 3; i += 9) {
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	e09b      	b.n	8000468 <parseRGBData+0x144>

		// r
		rgbDataInt[i + 0] = (rgbDataChar[i + 0] - '0') * 100;
 8000330:	4a53      	ldr	r2, [pc, #332]	; (8000480 <parseRGBData+0x15c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	18d3      	adds	r3, r2, r3
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2264      	movs	r2, #100	; 0x64
 800033a:	4353      	muls	r3, r2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	3340      	adds	r3, #64	; 0x40
 8000340:	b2d9      	uxtb	r1, r3
 8000342:	4a50      	ldr	r2, [pc, #320]	; (8000484 <parseRGBData+0x160>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	18d3      	adds	r3, r2, r3
 8000348:	1c0a      	adds	r2, r1, #0
 800034a:	701a      	strb	r2, [r3, #0]
		rgbDataInt[i + 0] += (rgbDataChar[i + 1] - '0') * 10;
 800034c:	4a4d      	ldr	r2, [pc, #308]	; (8000484 <parseRGBData+0x160>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	18d3      	adds	r3, r2, r3
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3301      	adds	r3, #1
 8000358:	4949      	ldr	r1, [pc, #292]	; (8000480 <parseRGBData+0x15c>)
 800035a:	5ccb      	ldrb	r3, [r1, r3]
 800035c:	1c19      	adds	r1, r3, #0
 800035e:	0089      	lsls	r1, r1, #2
 8000360:	18cb      	adds	r3, r1, r3
 8000362:	18db      	adds	r3, r3, r3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	18d3      	adds	r3, r2, r3
 8000368:	b2db      	uxtb	r3, r3
 800036a:	3320      	adds	r3, #32
 800036c:	b2d9      	uxtb	r1, r3
 800036e:	4a45      	ldr	r2, [pc, #276]	; (8000484 <parseRGBData+0x160>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	18d3      	adds	r3, r2, r3
 8000374:	1c0a      	adds	r2, r1, #0
 8000376:	701a      	strb	r2, [r3, #0]
		rgbDataInt[i + 0] += (rgbDataChar[i + 2] - '0');
 8000378:	4a42      	ldr	r2, [pc, #264]	; (8000484 <parseRGBData+0x160>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3302      	adds	r3, #2
 8000384:	493e      	ldr	r1, [pc, #248]	; (8000480 <parseRGBData+0x15c>)
 8000386:	5ccb      	ldrb	r3, [r1, r3]
 8000388:	18d3      	adds	r3, r2, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	3b30      	subs	r3, #48	; 0x30
 800038e:	b2d9      	uxtb	r1, r3
 8000390:	4a3c      	ldr	r2, [pc, #240]	; (8000484 <parseRGBData+0x160>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	18d3      	adds	r3, r2, r3
 8000396:	1c0a      	adds	r2, r1, #0
 8000398:	701a      	strb	r2, [r3, #0]

		// g
		rgbDataInt[i + 1] = (rgbDataChar[i + 3] - '0') * 100;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3303      	adds	r3, #3
 800039e:	4a38      	ldr	r2, [pc, #224]	; (8000480 <parseRGBData+0x15c>)
 80003a0:	5cd3      	ldrb	r3, [r2, r3]
 80003a2:	2264      	movs	r2, #100	; 0x64
 80003a4:	4353      	muls	r3, r2
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	3240      	adds	r2, #64	; 0x40
 80003ae:	b2d1      	uxtb	r1, r2
 80003b0:	4a34      	ldr	r2, [pc, #208]	; (8000484 <parseRGBData+0x160>)
 80003b2:	54d1      	strb	r1, [r2, r3]
		rgbDataInt[i + 1] += (rgbDataChar[i + 4] - '0') * 10;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a32      	ldr	r2, [pc, #200]	; (8000484 <parseRGBData+0x160>)
 80003ba:	5cd2      	ldrb	r2, [r2, r3]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3304      	adds	r3, #4
 80003c0:	492f      	ldr	r1, [pc, #188]	; (8000480 <parseRGBData+0x15c>)
 80003c2:	5ccb      	ldrb	r3, [r1, r3]
 80003c4:	1c19      	adds	r1, r3, #0
 80003c6:	0089      	lsls	r1, r1, #2
 80003c8:	18cb      	adds	r3, r1, r3
 80003ca:	18db      	adds	r3, r3, r3
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	18d3      	adds	r3, r2, r3
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3301      	adds	r3, #1
 80003d6:	3220      	adds	r2, #32
 80003d8:	b2d1      	uxtb	r1, r2
 80003da:	4a2a      	ldr	r2, [pc, #168]	; (8000484 <parseRGBData+0x160>)
 80003dc:	54d1      	strb	r1, [r2, r3]
		rgbDataInt[i + 1] += (rgbDataChar[i + 5] - '0');
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3301      	adds	r3, #1
 80003e2:	4a28      	ldr	r2, [pc, #160]	; (8000484 <parseRGBData+0x160>)
 80003e4:	5cd2      	ldrb	r2, [r2, r3]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3305      	adds	r3, #5
 80003ea:	4925      	ldr	r1, [pc, #148]	; (8000480 <parseRGBData+0x15c>)
 80003ec:	5ccb      	ldrb	r3, [r1, r3]
 80003ee:	18d3      	adds	r3, r2, r3
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	3a30      	subs	r2, #48	; 0x30
 80003f8:	b2d1      	uxtb	r1, r2
 80003fa:	4a22      	ldr	r2, [pc, #136]	; (8000484 <parseRGBData+0x160>)
 80003fc:	54d1      	strb	r1, [r2, r3]

		// b
		rgbDataInt[i + 2] = (rgbDataChar[i + 6] - '0') * 100;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	3306      	adds	r3, #6
 8000402:	4a1f      	ldr	r2, [pc, #124]	; (8000480 <parseRGBData+0x15c>)
 8000404:	5cd3      	ldrb	r3, [r2, r3]
 8000406:	2264      	movs	r2, #100	; 0x64
 8000408:	4353      	muls	r3, r2
 800040a:	b2da      	uxtb	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3302      	adds	r3, #2
 8000410:	3240      	adds	r2, #64	; 0x40
 8000412:	b2d1      	uxtb	r1, r2
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <parseRGBData+0x160>)
 8000416:	54d1      	strb	r1, [r2, r3]
		rgbDataInt[i + 2] += (rgbDataChar[i + 7] - '0') * 10;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3302      	adds	r3, #2
 800041c:	4a19      	ldr	r2, [pc, #100]	; (8000484 <parseRGBData+0x160>)
 800041e:	5cd2      	ldrb	r2, [r2, r3]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3307      	adds	r3, #7
 8000424:	4916      	ldr	r1, [pc, #88]	; (8000480 <parseRGBData+0x15c>)
 8000426:	5ccb      	ldrb	r3, [r1, r3]
 8000428:	1c19      	adds	r1, r3, #0
 800042a:	0089      	lsls	r1, r1, #2
 800042c:	18cb      	adds	r3, r1, r3
 800042e:	18db      	adds	r3, r3, r3
 8000430:	b2db      	uxtb	r3, r3
 8000432:	18d3      	adds	r3, r2, r3
 8000434:	b2da      	uxtb	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3302      	adds	r3, #2
 800043a:	3220      	adds	r2, #32
 800043c:	b2d1      	uxtb	r1, r2
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <parseRGBData+0x160>)
 8000440:	54d1      	strb	r1, [r2, r3]
		rgbDataInt[i + 2] += (rgbDataChar[i + 8] - '0');
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3302      	adds	r3, #2
 8000446:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <parseRGBData+0x160>)
 8000448:	5cd2      	ldrb	r2, [r2, r3]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3308      	adds	r3, #8
 800044e:	490c      	ldr	r1, [pc, #48]	; (8000480 <parseRGBData+0x15c>)
 8000450:	5ccb      	ldrb	r3, [r1, r3]
 8000452:	18d3      	adds	r3, r2, r3
 8000454:	b2da      	uxtb	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3302      	adds	r3, #2
 800045a:	3a30      	subs	r2, #48	; 0x30
 800045c:	b2d1      	uxtb	r1, r2
 800045e:	4a09      	ldr	r2, [pc, #36]	; (8000484 <parseRGBData+0x160>)
 8000460:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < LEDTOT * 3 * 3; i += 9) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3309      	adds	r3, #9
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	23cf      	movs	r3, #207	; 0xcf
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	429a      	cmp	r2, r3
 8000470:	da00      	bge.n	8000474 <parseRGBData+0x150>
 8000472:	e75d      	b.n	8000330 <parseRGBData+0xc>
		 rgbDataChar[i + 6], rgbDataChar[i + 7], rgbDataChar[i + 8],
		 rgbDataInt[i + 0], rgbDataInt[i + 1], rgbDataInt[i + 2]);
		 HAL_UART_Transmit(&huart1, test, sizeof(test), 10);
		 }*/
	}
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000000 	.word	0x20000000
 8000484:	20000374 	.word	0x20000374

08000488 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, &chill[0], sizeof(chill), 10);
 8000490:	490a      	ldr	r1, [pc, #40]	; (80004bc <HAL_UART_RxCpltCallback+0x34>)
 8000492:	480b      	ldr	r0, [pc, #44]	; (80004c0 <HAL_UART_RxCpltCallback+0x38>)
 8000494:	230a      	movs	r3, #10
 8000496:	2212      	movs	r2, #18
 8000498:	f002 fedc 	bl	8003254 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &rgbDataChar[0], sizeof(rgbDataChar), 10);
 800049c:	23cf      	movs	r3, #207	; 0xcf
 800049e:	005a      	lsls	r2, r3, #1
 80004a0:	4908      	ldr	r1, [pc, #32]	; (80004c4 <HAL_UART_RxCpltCallback+0x3c>)
 80004a2:	4807      	ldr	r0, [pc, #28]	; (80004c0 <HAL_UART_RxCpltCallback+0x38>)
 80004a4:	230a      	movs	r3, #10
 80004a6:	f002 fed5 	bl	8003254 <HAL_UART_Transmit>

	parseRGBData();
 80004aa:	f7ff ff3b 	bl	8000324 <parseRGBData>

	updateRGBStrip();
 80004ae:	f7ff fec7 	bl	8000240 <updateRGBStrip>
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	200001a0 	.word	0x200001a0
 80004c0:	20000268 	.word	0x20000268
 80004c4:	20000000 	.word	0x20000000

080004c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004cc:	f000 fb6c 	bl	8000ba8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d0:	f000 f814 	bl	80004fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d4:	f000 f946 	bl	8000764 <MX_GPIO_Init>
	MX_DMA_Init();
 80004d8:	f000 f91e 	bl	8000718 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80004dc:	f000 f8ec 	bl	80006b8 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80004e0:	f000 f86c 	bl	80005bc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_DMA(&huart1, rgbDataChar, LEDTOT * 3 * 3); // init dma
 80004e4:	23cf      	movs	r3, #207	; 0xcf
 80004e6:	005a      	lsls	r2, r3, #1
 80004e8:	4902      	ldr	r1, [pc, #8]	; (80004f4 <main+0x2c>)
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <main+0x30>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 ff5a 	bl	80033a6 <HAL_UART_Receive_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004f2:	e7fe      	b.n	80004f2 <main+0x2a>
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000268 	.word	0x20000268

080004fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b095      	sub	sp, #84	; 0x54
 8000500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000502:	2420      	movs	r4, #32
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2330      	movs	r3, #48	; 0x30
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f003 fcef 	bl	8003ef0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000512:	2310      	movs	r3, #16
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2310      	movs	r3, #16
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f003 fce7 	bl	8003ef0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2310      	movs	r3, #16
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f003 fce0 	bl	8003ef0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000530:	0021      	movs	r1, r4
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2202      	movs	r2, #2
 8000542:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0252      	lsls	r2, r2, #9
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	02d2      	lsls	r2, r2, #11
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800055a:	187b      	adds	r3, r7, r1
 800055c:	0018      	movs	r0, r3
 800055e:	f000 ffeb 	bl	8001538 <HAL_RCC_OscConfig>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x6e>
		Error_Handler();
 8000566:	f000 f953 	bl	8000810 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800056a:	2110      	movs	r1, #16
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2207      	movs	r2, #7
 8000570:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2202      	movs	r2, #2
 8000576:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2101      	movs	r1, #1
 8000588:	0018      	movs	r0, r3
 800058a:	f001 faef 	bl	8001b6c <HAL_RCC_ClockConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x9a>
		Error_Handler();
 8000592:	f000 f93d 	bl	8000810 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000596:	003b      	movs	r3, r7
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800059c:	003b      	movs	r3, r7
 800059e:	2201      	movs	r2, #1
 80005a0:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fc35 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xb6>
		Error_Handler();
 80005ae:	f000 f92f 	bl	8000810 <Error_Handler>
	}
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b015      	add	sp, #84	; 0x54
 80005b8:	bd90      	pop	{r4, r7, pc}
	...

080005bc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08e      	sub	sp, #56	; 0x38
 80005c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005c2:	2328      	movs	r3, #40	; 0x28
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2310      	movs	r3, #16
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f003 fc8f 	bl	8003ef0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005d2:	2320      	movs	r3, #32
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	0018      	movs	r0, r3
 80005d8:	2308      	movs	r3, #8
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f003 fc87 	bl	8003ef0 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	0018      	movs	r0, r3
 80005e6:	231c      	movs	r3, #28
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f003 fc80 	bl	8003ef0 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_TIM3_Init+0xf4>)
 80005f2:	4a30      	ldr	r2, [pc, #192]	; (80006b4 <MX_TIM3_Init+0xf8>)
 80005f4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1 - 1;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_TIM3_Init+0xf4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_TIM3_Init+0xf4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60 - 1;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_TIM3_Init+0xf4>)
 8000604:	223b      	movs	r2, #59	; 0x3b
 8000606:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_TIM3_Init+0xf4>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_TIM3_Init+0xf4>)
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_TIM3_Init+0xf4>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fcca 	bl	8001fb0 <HAL_TIM_Base_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000620:	f000 f8f6 	bl	8000810 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000624:	2128      	movs	r1, #40	; 0x28
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	0152      	lsls	r2, r2, #5
 800062c:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800062e:	187a      	adds	r2, r7, r1
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_TIM3_Init+0xf4>)
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f002 f8a5 	bl	8002784 <HAL_TIM_ConfigClockSource>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x86>
		Error_Handler();
 800063e:	f000 f8e7 	bl	8000810 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_TIM3_Init+0xf4>)
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fd03 	bl	8002050 <HAL_TIM_PWM_Init>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x96>
		Error_Handler();
 800064e:	f000 f8df 	bl	8000810 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000652:	2120      	movs	r1, #32
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000660:	187a      	adds	r2, r7, r1
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_TIM3_Init+0xf4>)
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fd4e 	bl	8003108 <HAL_TIMEx_MasterConfigSynchronization>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000670:	f000 f8ce 	bl	8000810 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2260      	movs	r2, #96	; 0x60
 8000678:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_TIM3_Init+0xf4>)
 8000690:	220c      	movs	r2, #12
 8000692:	0018      	movs	r0, r3
 8000694:	f001 ffb0 	bl	80025f8 <HAL_TIM_PWM_ConfigChannel>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM3_Init+0xe4>
			!= HAL_OK) {
		Error_Handler();
 800069c:	f000 f8b8 	bl	8000810 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <MX_TIM3_Init+0xf4>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f92e 	bl	8000904 <HAL_TIM_MspPostInit>

}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b00e      	add	sp, #56	; 0x38
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200001dc 	.word	0x200001dc
 80006b4:	40000400 	.word	0x40000400

080006b8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART1_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	0252      	lsls	r2, r2, #9
 80006c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <MX_USART1_UART_Init+0x58>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 fd55 	bl	80031ac <HAL_UART_Init>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000706:	f000 f883 	bl	8000810 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000268 	.word	0x20000268
 8000714:	40013800 	.word	0x40013800

08000718 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_DMA_Init+0x48>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_DMA_Init+0x48>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_DMA_Init+0x48>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fb44 	bl	8000dc8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000740:	200a      	movs	r0, #10
 8000742:	f000 fb56 	bl	8000df2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	200b      	movs	r0, #11
 800074c:	f000 fb3c 	bl	8000dc8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000750:	200b      	movs	r0, #11
 8000752:	f000 fb4e 	bl	8000df2 <HAL_NVIC_EnableIRQ>

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40021000 	.word	0x40021000

08000764 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076a:	240c      	movs	r4, #12
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0018      	movs	r0, r3
 8000770:	2314      	movs	r3, #20
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f003 fbbb 	bl	8003ef0 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0xa8>)
 800077c:	695a      	ldr	r2, [r3, #20]
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xa8>)
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	03c9      	lsls	r1, r1, #15
 8000784:	430a      	orrs	r2, r1
 8000786:	615a      	str	r2, [r3, #20]
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0xa8>)
 800078a:	695a      	ldr	r2, [r3, #20]
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	03db      	lsls	r3, r3, #15
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0xa8>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_GPIO_Init+0xa8>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_GPIO_Init+0xa8>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	4013      	ands	r3, r2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_GPIO_Init+0xa8>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0xa8>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	02c9      	lsls	r1, r1, #11
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_GPIO_Init+0xa8>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	02db      	lsls	r3, r3, #11
 80007c8:	4013      	ands	r3, r2
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_ACTIVITY_GPIO_Port, LED_ACTIVITY_Pin, GPIO_PIN_RESET);
 80007ce:	2390      	movs	r3, #144	; 0x90
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fe76 	bl	80014c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_ACTIVITY_Pin */
	GPIO_InitStruct.Pin = LED_ACTIVITY_Pin;
 80007dc:	0021      	movs	r1, r4
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2201      	movs	r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_ACTIVITY_GPIO_Port, &GPIO_InitStruct);
 80007f6:	187a      	adds	r2, r7, r1
 80007f8:	2390      	movs	r3, #144	; 0x90
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fcf2 	bl	80011e8 <HAL_GPIO_Init>

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b009      	add	sp, #36	; 0x24
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	40021000 	.word	0x40021000

08000810 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	619a      	str	r2, [r3, #24]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	69da      	ldr	r2, [r3, #28]
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0549      	lsls	r1, r1, #21
 8000844:	430a      	orrs	r2, r1
 8000846:	61da      	str	r2, [r3, #28]
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_MspInit+0x44>)
 800084a:	69da      	ldr	r2, [r3, #28]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	055b      	lsls	r3, r3, #21
 8000850:	4013      	ands	r3, r2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <HAL_TIM_Base_MspInit+0x90>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d139      	bne.n	80008ea <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_TIM_Base_MspInit+0x94>)
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_TIM_Base_MspInit+0x94>)
 800087c:	2102      	movs	r1, #2
 800087e:	430a      	orrs	r2, r1
 8000880:	61da      	str	r2, [r3, #28]
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_TIM_Base_MspInit+0x94>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	2202      	movs	r2, #2
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <HAL_TIM_Base_MspInit+0x9c>)
 8000892:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 8000896:	2210      	movs	r2, #16
 8000898:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	00d2      	lsls	r2, r2, #3
 80008b4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fab1 	bl	8000e2c <HAL_DMA_Init>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80008ce:	f7ff ff9f 	bl	8000810 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008e2:	621a      	str	r2, [r3, #32]
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_TIM_Base_MspInit+0x98>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40000400 	.word	0x40000400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	20000224 	.word	0x20000224
 8000900:	40020030 	.word	0x40020030

08000904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	240c      	movs	r4, #12
 800090e:	193b      	adds	r3, r7, r4
 8000910:	0018      	movs	r0, r3
 8000912:	2314      	movs	r3, #20
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f003 faea 	bl	8003ef0 <memset>
  if(htim->Instance==TIM3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_TIM_MspPostInit+0x74>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d123      	bne.n	800096e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_TIM_MspPostInit+0x78>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_TIM_MspPostInit+0x78>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	02c9      	lsls	r1, r1, #11
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_TIM_MspPostInit+0x78>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	02db      	lsls	r3, r3, #11
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000942:	0021      	movs	r1, r4
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2202      	movs	r2, #2
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	187b      	adds	r3, r7, r1
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_TIM_MspPostInit+0x7c>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f000 fc3d 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b009      	add	sp, #36	; 0x24
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40000400 	.word	0x40000400
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b08b      	sub	sp, #44	; 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	2414      	movs	r4, #20
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f003 faaa 	bl	8003ef0 <memset>
  if(huart->Instance==USART1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a47      	ldr	r2, [pc, #284]	; (8000ac0 <HAL_UART_MspInit+0x13c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d000      	beq.n	80009a8 <HAL_UART_MspInit+0x24>
 80009a6:	e086      	b.n	8000ab6 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a8:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <HAL_UART_MspInit+0x140>)
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	4b45      	ldr	r3, [pc, #276]	; (8000ac4 <HAL_UART_MspInit+0x140>)
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	01c9      	lsls	r1, r1, #7
 80009b2:	430a      	orrs	r2, r1
 80009b4:	619a      	str	r2, [r3, #24]
 80009b6:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <HAL_UART_MspInit+0x140>)
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	01db      	lsls	r3, r3, #7
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <HAL_UART_MspInit+0x140>)
 80009c6:	695a      	ldr	r2, [r3, #20]
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <HAL_UART_MspInit+0x140>)
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	0289      	lsls	r1, r1, #10
 80009ce:	430a      	orrs	r2, r1
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_UART_MspInit+0x140>)
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	029b      	lsls	r3, r3, #10
 80009da:	4013      	ands	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e0:	0021      	movs	r1, r4
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	220c      	movs	r2, #12
 80009e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2202      	movs	r2, #2
 80009ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2203      	movs	r2, #3
 80009f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2201      	movs	r2, #1
 80009fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	187a      	adds	r2, r7, r1
 8000a02:	2390      	movs	r3, #144	; 0x90
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fbed 	bl	80011e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a10:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <HAL_UART_MspInit+0x148>)
 8000a12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	0192      	lsls	r2, r2, #6
 8000a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f9f2 	bl	8000e2c <HAL_DMA_Init>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a4c:	f7ff fee0 	bl	8000810 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_RX_DMA_CH5);
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_UART_MspInit+0x14c>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <HAL_UART_MspInit+0x14c>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	00c9      	lsls	r1, r1, #3
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a62:	671a      	str	r2, [r3, #112]	; 0x70
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_UART_MspInit+0x144>)
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_UART_MspInit+0x154>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a72:	2210      	movs	r2, #16
 8000a74:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 f9c5 	bl	8000e2c <HAL_DMA_Init>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8000aa6:	f7ff feb3 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000aae:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_UART_MspInit+0x150>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b00b      	add	sp, #44	; 0x2c
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	200002ec 	.word	0x200002ec
 8000acc:	40020058 	.word	0x40020058
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	20000330 	.word	0x20000330
 8000ad8:	4002001c 	.word	0x4002001c

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f89a 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fa7d 	bl	8001012 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <DMA1_Channel2_3_IRQHandler+0x20>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fa79 	bl	8001012 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000330 	.word	0x20000330
 8000b2c:	20000224 	.word	0x20000224

08000b30 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 fa6b 	bl	8001012 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	200002ec 	.word	0x200002ec

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b7e:	f7ff ffe3 	bl	8000b48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b82:	f003 f991 	bl	8003ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff fc9f 	bl	80004c8 <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   r0, =_estack
 8000b8c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8000b98:	08003f58 	.word	0x08003f58
  ldr r2, =_sbss
 8000b9c:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8000ba0:	2000085c 	.word	0x2000085c

08000ba4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_Init+0x24>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_Init+0x24>)
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f809 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbe:	f7ff fe2d 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x5c>)
 8000bda:	681c      	ldr	r4, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x60>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	0019      	movs	r1, r3
 8000be2:	23fa      	movs	r3, #250	; 0xfa
 8000be4:	0098      	lsls	r0, r3, #2
 8000be6:	f7ff fa8f 	bl	8000108 <__udivsi3>
 8000bea:	0003      	movs	r3, r0
 8000bec:	0019      	movs	r1, r3
 8000bee:	0020      	movs	r0, r4
 8000bf0:	f7ff fa8a 	bl	8000108 <__udivsi3>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f90b 	bl	8000e12 <HAL_SYSTICK_Config>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e00f      	b.n	8000c24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d80b      	bhi.n	8000c22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	425b      	negs	r3, r3
 8000c10:	2200      	movs	r2, #0
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 f8d8 	bl	8000dc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_InitTick+0x64>)
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b003      	add	sp, #12
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	200001b4 	.word	0x200001b4
 8000c30:	200001bc 	.word	0x200001bc
 8000c34:	200001b8 	.word	0x200001b8

08000c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	001a      	movs	r2, r3
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x20>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	18d2      	adds	r2, r2, r3
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_IncTick+0x20>)
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	200001bc 	.word	0x200001bc
 8000c58:	20000858 	.word	0x20000858

08000c5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <HAL_GetTick+0x10>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000858 	.word	0x20000858

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b7f      	cmp	r3, #127	; 0x7f
 8000c82:	d809      	bhi.n	8000c98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_EnableIRQ+0x30>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	4091      	lsls	r1, r2
 8000c94:	000a      	movs	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
  }
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb8:	d828      	bhi.n	8000d0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	33c0      	adds	r3, #192	; 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	589b      	ldr	r3, [r3, r2]
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	; 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	401a      	ands	r2, r3
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	481f      	ldr	r0, [pc, #124]	; (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	430a      	orrs	r2, r1
 8000d04:	33c0      	adds	r3, #192	; 0xc0
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d0a:	e031      	b.n	8000d70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0019      	movs	r1, r3
 8000d14:	230f      	movs	r3, #15
 8000d16:	400b      	ands	r3, r1
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3306      	adds	r3, #6
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	18d3      	adds	r3, r2, r3
 8000d22:	3304      	adds	r3, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1dfa      	adds	r2, r7, #7
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	400a      	ands	r2, r1
 8000d30:	00d2      	lsls	r2, r2, #3
 8000d32:	21ff      	movs	r1, #255	; 0xff
 8000d34:	4091      	lsls	r1, r2
 8000d36:	000a      	movs	r2, r1
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	22ff      	movs	r2, #255	; 0xff
 8000d44:	401a      	ands	r2, r3
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	4003      	ands	r3, r0
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	001c      	movs	r4, r3
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	4023      	ands	r3, r4
 8000d60:	3b08      	subs	r3, #8
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	430a      	orrs	r2, r1
 8000d66:	3306      	adds	r3, #6
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	18c3      	adds	r3, r0, r3
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b003      	add	sp, #12
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	045b      	lsls	r3, r3, #17
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d301      	bcc.n	8000d98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d94:	2301      	movs	r3, #1
 8000d96:	e010      	b.n	8000dba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <SysTick_Config+0x44>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2103      	movs	r1, #3
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff ff7c 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x44>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x44>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	1c02      	adds	r2, r0, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	0002      	movs	r2, r0
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff33 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffaf 	bl	8000d80 <SysTick_Config>
 8000e22:	0003      	movs	r3, r0
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e036      	b.n	8000eb0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2221      	movs	r2, #33	; 0x21
 8000e46:	2102      	movs	r1, #2
 8000e48:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_DMA_Init+0x8c>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f98c 	bl	80011b0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2221      	movs	r2, #33	; 0x21
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	2100      	movs	r1, #0
 8000eac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}  
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	ffffc00f 	.word	0xffffc00f

08000ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000eca:	2317      	movs	r3, #23
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_DMA_Start_IT+0x24>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e04f      	b.n	8000f80 <HAL_DMA_Start_IT+0xc4>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2221      	movs	r2, #33	; 0x21
 8000eec:	5c9b      	ldrb	r3, [r3, r2]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d13a      	bne.n	8000f6a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2221      	movs	r2, #33	; 0x21
 8000ef8:	2102      	movs	r1, #2
 8000efa:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2200      	movs	r2, #0
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	438a      	bics	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 f91c 	bl	8001156 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	210e      	movs	r1, #14
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e00f      	b.n	8000f58 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	210a      	movs	r1, #10
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2104      	movs	r1, #4
 8000f54:	438a      	bics	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2101      	movs	r1, #1
 8000f64:	430a      	orrs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e007      	b.n	8000f7a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000f72:	2317      	movs	r3, #23
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2202      	movs	r2, #2
 8000f78:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000f7a:	2317      	movs	r3, #23
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
} 
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f90:	210f      	movs	r1, #15
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2221      	movs	r2, #33	; 0x21
 8000f9c:	5c9b      	ldrb	r3, [r3, r2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d006      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e028      	b.n	8001004 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	210e      	movs	r1, #14
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	438a      	bics	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2221      	movs	r2, #33	; 0x21
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	0010      	movs	r0, r2
 8001002:	4798      	blx	r3
    } 
  }
  return status;
 8001004:	230f      	movs	r3, #15
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	781b      	ldrb	r3, [r3, #0]
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2204      	movs	r2, #4
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	d024      	beq.n	8001084 <HAL_DMA_IRQHandler+0x72>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2204      	movs	r2, #4
 800103e:	4013      	ands	r3, r2
 8001040:	d020      	beq.n	8001084 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2220      	movs	r2, #32
 800104a:	4013      	ands	r3, r2
 800104c:	d107      	bne.n	800105e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2104      	movs	r1, #4
 800105a:	438a      	bics	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001066:	2104      	movs	r1, #4
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <HAL_DMA_IRQHandler+0x66>
 8001076:	e06a      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	0010      	movs	r0, r2
 8001080:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001082:	e064      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	2202      	movs	r2, #2
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	d02b      	beq.n	80010ec <HAL_DMA_IRQHandler+0xda>
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d027      	beq.n	80010ec <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2220      	movs	r2, #32
 80010a4:	4013      	ands	r3, r2
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	210a      	movs	r1, #10
 80010b4:	438a      	bics	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2221      	movs	r2, #33	; 0x21
 80010bc:	2101      	movs	r1, #1
 80010be:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c8:	2102      	movs	r1, #2
 80010ca:	4091      	lsls	r1, r2
 80010cc:	000a      	movs	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2220      	movs	r2, #32
 80010d4:	2100      	movs	r1, #0
 80010d6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d036      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	0010      	movs	r0, r2
 80010e8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80010ea:	e030      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	2208      	movs	r2, #8
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4013      	ands	r3, r2
 80010fa:	d028      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2208      	movs	r2, #8
 8001100:	4013      	ands	r3, r2
 8001102:	d024      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	210e      	movs	r1, #14
 8001110:	438a      	bics	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111c:	2101      	movs	r1, #1
 800111e:	4091      	lsls	r1, r2
 8001120:	000a      	movs	r2, r1
 8001122:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2221      	movs	r2, #33	; 0x21
 800112e:	2101      	movs	r1, #1
 8001130:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	0010      	movs	r0, r2
 800114a:	4798      	blx	r3
    }
   }
}  
 800114c:	e7ff      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}

08001156 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	2101      	movs	r1, #1
 800116e:	4091      	lsls	r1, r2
 8001170:	000a      	movs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b10      	cmp	r3, #16
 8001182:	d108      	bne.n	8001196 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001194:	e007      	b.n	80011a6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	60da      	str	r2, [r3, #12]
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <DMA_CalcBaseAndBitshift+0x30>)
 80011be:	4694      	mov	ip, r2
 80011c0:	4463      	add	r3, ip
 80011c2:	2114      	movs	r1, #20
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7fe ff9f 	bl	8000108 <__udivsi3>
 80011ca:	0003      	movs	r3, r0
 80011cc:	009a      	lsls	r2, r3, #2
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <DMA_CalcBaseAndBitshift+0x34>)
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	bffdfff8 	.word	0xbffdfff8
 80011e4:	40020000 	.word	0x40020000

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e14f      	b.n	8001498 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x28>
 800120e:	e140      	b.n	8001492 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	2201      	movs	r2, #1
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	4013      	ands	r3, r2
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	58d3      	ldr	r3, [r2, r3]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2107      	movs	r1, #7
 80012fe:	400b      	ands	r3, r1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	401a      	ands	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d100      	bne.n	800135c <HAL_GPIO_Init+0x174>
 800135a:	e09a      	b.n	8001492 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2201      	movs	r2, #1
 800136e:	4013      	ands	r3, r2
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	589b      	ldr	r3, [r3, r2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	2390      	movs	r3, #144	; 0x90
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	429a      	cmp	r2, r3
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x1e2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x1de>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a43      	ldr	r2, [pc, #268]	; (80014bc <HAL_GPIO_Init+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x1da>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <HAL_GPIO_Init+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x1d6>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013be:	2305      	movs	r3, #5
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013ca:	2300      	movs	r3, #0
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	2103      	movs	r1, #3
 80013d0:	400a      	ands	r2, r1
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013dc:	4935      	ldr	r1, [pc, #212]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43da      	mvns	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	4013      	ands	r3, r2
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	4013      	ands	r3, r2
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	035b      	lsls	r3, r3, #13
 8001456:	4013      	ands	r3, r2
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	4013      	ands	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	40da      	lsrs	r2, r3
 80014a0:	1e13      	subs	r3, r2, #0
 80014a2:	d000      	beq.n	80014a6 <HAL_GPIO_Init+0x2be>
 80014a4:	e6a8      	b.n	80011f8 <HAL_GPIO_Init+0x10>
  } 
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b006      	add	sp, #24
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000800 	.word	0x48000800
 80014c0:	48000c00 	.word	0x48000c00
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	0008      	movs	r0, r1
 80014d2:	0011      	movs	r1, r2
 80014d4:	1cbb      	adds	r3, r7, #2
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	1c7b      	adds	r3, r7, #1
 80014dc:	1c0a      	adds	r2, r1, #0
 80014de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e0:	1c7b      	adds	r3, r7, #1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014e8:	1cbb      	adds	r3, r7, #2
 80014ea:	881a      	ldrh	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014f2:	1cbb      	adds	r3, r7, #2
 80014f4:	881a      	ldrh	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	000a      	movs	r2, r1
 800150c:	1cbb      	adds	r3, r7, #2
 800150e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001516:	1cbb      	adds	r3, r7, #2
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	041a      	lsls	r2, r3, #16
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	1cb9      	adds	r1, r7, #2
 8001526:	8809      	ldrh	r1, [r1, #0]
 8001528:	400b      	ands	r3, r1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e301      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	4013      	ands	r3, r2
 8001552:	d100      	bne.n	8001556 <HAL_RCC_OscConfig+0x1e>
 8001554:	e08d      	b.n	8001672 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001556:	4bc3      	ldr	r3, [pc, #780]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	220c      	movs	r2, #12
 800155c:	4013      	ands	r3, r2
 800155e:	2b04      	cmp	r3, #4
 8001560:	d00e      	beq.n	8001580 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001562:	4bc0      	ldr	r3, [pc, #768]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	220c      	movs	r2, #12
 8001568:	4013      	ands	r3, r2
 800156a:	2b08      	cmp	r3, #8
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x64>
 800156e:	4bbd      	ldr	r3, [pc, #756]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	401a      	ands	r2, r3
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	429a      	cmp	r2, r3
 800157e:	d10d      	bne.n	800159c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4bb8      	ldr	r3, [pc, #736]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x56>
 800158c:	e070      	b.n	8001670 <HAL_RCC_OscConfig+0x138>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d000      	beq.n	8001598 <HAL_RCC_OscConfig+0x60>
 8001596:	e06b      	b.n	8001670 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e2d8      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x7c>
 80015a4:	4baf      	ldr	r3, [pc, #700]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4bae      	ldr	r3, [pc, #696]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0249      	lsls	r1, r1, #9
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e02f      	b.n	8001614 <HAL_RCC_OscConfig+0xdc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x9e>
 80015bc:	4ba9      	ldr	r3, [pc, #676]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4ba8      	ldr	r3, [pc, #672]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	49a9      	ldr	r1, [pc, #676]	; (8001868 <HAL_RCC_OscConfig+0x330>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	4ba6      	ldr	r3, [pc, #664]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4ba5      	ldr	r3, [pc, #660]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	49a7      	ldr	r1, [pc, #668]	; (800186c <HAL_RCC_OscConfig+0x334>)
 80015d0:	400a      	ands	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e01e      	b.n	8001614 <HAL_RCC_OscConfig+0xdc>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d10e      	bne.n	80015fc <HAL_RCC_OscConfig+0xc4>
 80015de:	4ba1      	ldr	r3, [pc, #644]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4ba0      	ldr	r3, [pc, #640]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	02c9      	lsls	r1, r1, #11
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	4b9d      	ldr	r3, [pc, #628]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b9c      	ldr	r3, [pc, #624]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	0249      	lsls	r1, r1, #9
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xdc>
 80015fc:	4b99      	ldr	r3, [pc, #612]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b98      	ldr	r3, [pc, #608]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001602:	4999      	ldr	r1, [pc, #612]	; (8001868 <HAL_RCC_OscConfig+0x330>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	4b96      	ldr	r3, [pc, #600]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b95      	ldr	r3, [pc, #596]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800160e:	4997      	ldr	r1, [pc, #604]	; (800186c <HAL_RCC_OscConfig+0x334>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d014      	beq.n	8001646 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fb1e 	bl	8000c5c <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001626:	f7ff fb19 	bl	8000c5c <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b64      	cmp	r3, #100	; 0x64
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e28a      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001638:	4b8a      	ldr	r3, [pc, #552]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	029b      	lsls	r3, r3, #10
 8001640:	4013      	ands	r3, r2
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0xee>
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb09 	bl	8000c5c <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fb04 	bl	8000c5c <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e275      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b80      	ldr	r3, [pc, #512]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	029b      	lsls	r3, r3, #10
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x118>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d100      	bne.n	800167e <HAL_RCC_OscConfig+0x146>
 800167c:	e069      	b.n	8001752 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800167e:	4b79      	ldr	r3, [pc, #484]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	220c      	movs	r2, #12
 8001684:	4013      	ands	r3, r2
 8001686:	d00b      	beq.n	80016a0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001688:	4b76      	ldr	r3, [pc, #472]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	220c      	movs	r2, #12
 800168e:	4013      	ands	r3, r2
 8001690:	2b08      	cmp	r3, #8
 8001692:	d11c      	bne.n	80016ce <HAL_RCC_OscConfig+0x196>
 8001694:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	025b      	lsls	r3, r3, #9
 800169c:	4013      	ands	r3, r2
 800169e:	d116      	bne.n	80016ce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x17e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e24b      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	22f8      	movs	r2, #248	; 0xf8
 80016bc:	4393      	bics	r3, r2
 80016be:	0019      	movs	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00da      	lsls	r2, r3, #3
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016cc:	e041      	b.n	8001752 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d024      	beq.n	8001720 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b62      	ldr	r3, [pc, #392]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	2101      	movs	r1, #1
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fabb 	bl	8000c5c <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fab6 	bl	8000c5c <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e227      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d0f1      	beq.n	80016ec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b56      	ldr	r3, [pc, #344]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	22f8      	movs	r2, #248	; 0xf8
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00da      	lsls	r2, r3, #3
 8001718:	4b52      	ldr	r3, [pc, #328]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e018      	b.n	8001752 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001726:	2101      	movs	r1, #1
 8001728:	438a      	bics	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fa96 	bl	8000c5c <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fa91 	bl	8000c5c <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e202      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001748:	4b46      	ldr	r3, [pc, #280]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2202      	movs	r2, #2
 800174e:	4013      	ands	r3, r2
 8001750:	d1f1      	bne.n	8001736 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2208      	movs	r2, #8
 8001758:	4013      	ands	r3, r2
 800175a:	d036      	beq.n	80017ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d019      	beq.n	8001798 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800176a:	2101      	movs	r1, #1
 800176c:	430a      	orrs	r2, r1
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fa74 	bl	8000c5c <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fa6f 	bl	8000c5c <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1e0      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178c:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d0f1      	beq.n	800177a <HAL_RCC_OscConfig+0x242>
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa5a 	bl	8000c5c <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fa55 	bl	8000c5c <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1c6      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f1      	bne.n	80017ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x29e>
 80017d4:	e0b4      	b.n	8001940 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	201f      	movs	r0, #31
 80017d8:	183b      	adds	r3, r7, r0
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	055b      	lsls	r3, r3, #21
 80017e6:	4013      	ands	r3, r2
 80017e8:	d110      	bne.n	800180c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0549      	lsls	r1, r1, #21
 80017f4:	430a      	orrs	r2, r1
 80017f6:	61da      	str	r2, [r3, #28]
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	055b      	lsls	r3, r3, #21
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001806:	183b      	adds	r3, r7, r0
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_RCC_OscConfig+0x338>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4013      	ands	r3, r2
 8001816:	d11a      	bne.n	800184e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_RCC_OscConfig+0x338>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_RCC_OscConfig+0x338>)
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	0049      	lsls	r1, r1, #1
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff fa19 	bl	8000c5c <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001830:	f7ff fa14 	bl	8000c5c <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e185      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x338>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4013      	ands	r3, r2
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10e      	bne.n	8001874 <HAL_RCC_OscConfig+0x33c>
 8001856:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 8001858:	6a1a      	ldr	r2, [r3, #32]
 800185a:	4b02      	ldr	r3, [pc, #8]	; (8001864 <HAL_RCC_OscConfig+0x32c>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	621a      	str	r2, [r3, #32]
 8001862:	e035      	b.n	80018d0 <HAL_RCC_OscConfig+0x398>
 8001864:	40021000 	.word	0x40021000
 8001868:	fffeffff 	.word	0xfffeffff
 800186c:	fffbffff 	.word	0xfffbffff
 8001870:	40007000 	.word	0x40007000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x35e>
 800187c:	4bb6      	ldr	r3, [pc, #728]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	4bb5      	ldr	r3, [pc, #724]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001882:	2101      	movs	r1, #1
 8001884:	438a      	bics	r2, r1
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	4bb3      	ldr	r3, [pc, #716]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 800188a:	6a1a      	ldr	r2, [r3, #32]
 800188c:	4bb2      	ldr	r3, [pc, #712]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 800188e:	2104      	movs	r1, #4
 8001890:	438a      	bics	r2, r1
 8001892:	621a      	str	r2, [r3, #32]
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x398>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x380>
 800189e:	4bae      	ldr	r3, [pc, #696]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	4bad      	ldr	r3, [pc, #692]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018a4:	2104      	movs	r1, #4
 80018a6:	430a      	orrs	r2, r1
 80018a8:	621a      	str	r2, [r3, #32]
 80018aa:	4bab      	ldr	r3, [pc, #684]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018ac:	6a1a      	ldr	r2, [r3, #32]
 80018ae:	4baa      	ldr	r3, [pc, #680]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0x398>
 80018b8:	4ba7      	ldr	r3, [pc, #668]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	4ba6      	ldr	r3, [pc, #664]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	4ba4      	ldr	r3, [pc, #656]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4ba3      	ldr	r3, [pc, #652]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018ca:	2104      	movs	r1, #4
 80018cc:	438a      	bics	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d014      	beq.n	8001902 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff f9c0 	bl	8000c5c <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f9bb 	bl	8000c5c <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a9b      	ldr	r2, [pc, #620]	; (8001b5c <HAL_RCC_OscConfig+0x624>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e12b      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	4b98      	ldr	r3, [pc, #608]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	2202      	movs	r2, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3aa>
 8001900:	e013      	b.n	800192a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff f9ab 	bl	8000c5c <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	e009      	b.n	8001920 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff f9a6 	bl	8000c5c <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	4a91      	ldr	r2, [pc, #580]	; (8001b5c <HAL_RCC_OscConfig+0x624>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e116      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	4b8d      	ldr	r3, [pc, #564]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800192a:	231f      	movs	r3, #31
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 800193a:	4989      	ldr	r1, [pc, #548]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 800193c:	400a      	ands	r2, r1
 800193e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2210      	movs	r2, #16
 8001946:	4013      	ands	r3, r2
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d12a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001956:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001958:	2104      	movs	r1, #4
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800195e:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001962:	4b7d      	ldr	r3, [pc, #500]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001964:	2101      	movs	r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff f977 	bl	8000c5c <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001974:	f7ff f972 	bl	8000c5c <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e0e3      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001986:	4b74      	ldr	r3, [pc, #464]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d0f1      	beq.n	8001974 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001990:	4b71      	ldr	r3, [pc, #452]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001994:	22f8      	movs	r2, #248	; 0xf8
 8001996:	4393      	bics	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	00da      	lsls	r2, r3, #3
 80019a0:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
 80019a6:	e034      	b.n	8001a12 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	3305      	adds	r3, #5
 80019ae:	d111      	bne.n	80019d4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019b0:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019b6:	2104      	movs	r1, #4
 80019b8:	438a      	bics	r2, r1
 80019ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c0:	22f8      	movs	r2, #248	; 0xf8
 80019c2:	4393      	bics	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	00da      	lsls	r2, r3, #3
 80019cc:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
 80019d2:	e01e      	b.n	8001a12 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019d4:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d8:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019da:	2104      	movs	r1, #4
 80019dc:	430a      	orrs	r2, r1
 80019de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019e0:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e4:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	438a      	bics	r2, r1
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7ff f936 	bl	8000c5c <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019f6:	f7ff f931 	bl	8000c5c <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0a2      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d1f1      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d100      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4e4>
 8001a1a:	e097      	b.n	8001b4c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	220c      	movs	r2, #12
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d100      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4f2>
 8001a28:	e06b      	b.n	8001b02 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d14c      	bne.n	8001acc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a38:	494a      	ldr	r1, [pc, #296]	; (8001b64 <HAL_RCC_OscConfig+0x62c>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f90d 	bl	8000c5c <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f908 	bl	8000c5c <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e079      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	049b      	lsls	r3, r3, #18
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a66:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <HAL_RCC_OscConfig+0x630>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	0449      	lsls	r1, r1, #17
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f8db 	bl	8000c5c <HAL_GetTick>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f8d6 	bl	8000c5c <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e047      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	049b      	lsls	r3, r3, #18
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x574>
 8001aca:	e03f      	b.n	8001b4c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001ad2:	4924      	ldr	r1, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x62c>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f8c0 	bl	8000c5c <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f8bb 	bl	8000c5c <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e02c      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	049b      	lsls	r3, r3, #18
 8001afc:	4013      	ands	r3, r2
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5aa>
 8001b00:	e024      	b.n	8001b4c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e01f      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_RCC_OscConfig+0x620>)
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	025b      	lsls	r3, r3, #9
 8001b20:	401a      	ands	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d10e      	bne.n	8001b48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	23f0      	movs	r3, #240	; 0xf0
 8001b3c:	039b      	lsls	r3, r3, #14
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b008      	add	sp, #32
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	00001388 	.word	0x00001388
 8001b60:	efffffff 	.word	0xefffffff
 8001b64:	feffffff 	.word	0xfeffffff
 8001b68:	ffc2ffff 	.word	0xffc2ffff

08001b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b3      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d911      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4393      	bics	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e09a      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d015      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d006      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001bcc:	21e0      	movs	r1, #224	; 0xe0
 8001bce:	00c9      	lsls	r1, r1, #3
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	22f0      	movs	r2, #240	; 0xf0
 8001bda:	4393      	bics	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d040      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	4013      	ands	r3, r2
 8001c04:	d114      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06e      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	049b      	lsls	r3, r3, #18
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e062      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e05b      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2203      	movs	r2, #3
 8001c36:	4393      	bics	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c44:	f7ff f80a 	bl	8000c5c <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4c:	e009      	b.n	8001c62 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4e:	f7ff f805 	bl	8000c5c <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_RCC_ClockConfig+0x18c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e042      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	220c      	movs	r2, #12
 8001c68:	401a      	ands	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1ec      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d211      	bcs.n	8001ca6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4393      	bics	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x184>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e020      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2204      	movs	r2, #4
 8001cac:	4013      	ands	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_RCC_ClockConfig+0x190>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cc4:	f000 f820 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc8:	0001      	movs	r1, r0
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x188>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x194>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	000a      	movs	r2, r1
 8001cda:	40da      	lsrs	r2, r3
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x198>)
 8001cde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f7fe ff75 	bl	8000bd0 <HAL_InitTick>
  
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b004      	add	sp, #16
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	00001388 	.word	0x00001388
 8001cfc:	fffff8ff 	.word	0xfffff8ff
 8001d00:	08003f38 	.word	0x08003f38
 8001d04:	200001b4 	.word	0x200001b4

08001d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b08f      	sub	sp, #60	; 0x3c
 8001d0c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d0e:	2314      	movs	r3, #20
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	4a2b      	ldr	r2, [pc, #172]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d16:	c313      	stmia	r3!, {r0, r1, r4}
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d22:	c313      	stmia	r3!, {r0, r1, r4}
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	220c      	movs	r2, #12
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d002      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x4a>
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d003      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x50>
 8001d50:	e02d      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d56:	e02d      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2214      	movs	r2, #20
 8001d62:	18ba      	adds	r2, r7, r2
 8001d64:	5cd3      	ldrb	r3, [r2, r3]
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d68:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	4013      	ands	r3, r2
 8001d70:	1d3a      	adds	r2, r7, #4
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	025b      	lsls	r3, r3, #9
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d82:	4812      	ldr	r0, [pc, #72]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d84:	f7fe f9c0 	bl	8000108 <__udivsi3>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	4353      	muls	r3, r2
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	e009      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d96:	000a      	movs	r2, r1
 8001d98:	0152      	lsls	r2, r2, #5
 8001d9a:	1a52      	subs	r2, r2, r1
 8001d9c:	0193      	lsls	r3, r2, #6
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	185b      	adds	r3, r3, r1
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dac:	e002      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b00f      	add	sp, #60	; 0x3c
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	08003f18 	.word	0x08003f18
 8001dc4:	08003f28 	.word	0x08003f28
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	007a1200 	.word	0x007a1200

08001dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	200001b4 	.word	0x200001b4

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001dec:	f7ff fff2 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001df0:	0001      	movs	r1, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	2207      	movs	r2, #7
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	40d9      	lsrs	r1, r3
 8001e02:	000b      	movs	r3, r1
}    
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003f48 	.word	0x08003f48

08001e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e30:	e08e      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2017      	movs	r0, #23
 8001e34:	183b      	adds	r3, r7, r0
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	055b      	lsls	r3, r3, #21
 8001e42:	4013      	ands	r3, r2
 8001e44:	d110      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b54      	ldr	r3, [pc, #336]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0549      	lsls	r1, r1, #21
 8001e50:	430a      	orrs	r2, r1
 8001e52:	61da      	str	r2, [r3, #28]
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	055b      	lsls	r3, r3, #21
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d11a      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b48      	ldr	r3, [pc, #288]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	0049      	lsls	r1, r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7fe feeb 	bl	8000c5c <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	e008      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7fe fee6 	bl	8000c5c <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e077      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eac:	6a1a      	ldr	r2, [r3, #32]
 8001eae:	23c0      	movs	r3, #192	; 0xc0
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d034      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d02c      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ecc:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a33      	ldr	r2, [pc, #204]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0249      	lsls	r1, r1, #9
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eea:	492e      	ldr	r1, [pc, #184]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe fead 	bl	8000c5c <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	e009      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe fea8 	bl	8000c5c <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e038      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	2202      	movs	r2, #2
 8001f22:	4013      	ands	r3, r2
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f4a:	4918      	ldr	r1, [pc, #96]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2220      	movs	r2, #32
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b006      	add	sp, #24
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	fffffcff 	.word	0xfffffcff
 8001fa4:	fffeffff 	.word	0xfffeffff
 8001fa8:	00001388 	.word	0x00001388
 8001fac:	efffffff 	.word	0xefffffff

08001fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e042      	b.n	8002048 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223d      	movs	r2, #61	; 0x3d
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	223c      	movs	r2, #60	; 0x3c
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7fe fc43 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	223d      	movs	r2, #61	; 0x3d
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	0019      	movs	r1, r3
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	f000 fd7f 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2246      	movs	r2, #70	; 0x46
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223e      	movs	r2, #62	; 0x3e
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223f      	movs	r2, #63	; 0x3f
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2240      	movs	r2, #64	; 0x40
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2241      	movs	r2, #65	; 0x41
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2242      	movs	r2, #66	; 0x42
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2243      	movs	r2, #67	; 0x43
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2244      	movs	r2, #68	; 0x44
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2245      	movs	r2, #69	; 0x45
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223d      	movs	r2, #61	; 0x3d
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e042      	b.n	80020e8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	223d      	movs	r2, #61	; 0x3d
 8002066:	5c9b      	ldrb	r3, [r3, r2]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223c      	movs	r2, #60	; 0x3c
 8002072:	2100      	movs	r1, #0
 8002074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f839 	bl	80020f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223d      	movs	r2, #61	; 0x3d
 8002082:	2102      	movs	r1, #2
 8002084:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	0019      	movs	r1, r3
 8002090:	0010      	movs	r0, r2
 8002092:	f000 fd2f 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2246      	movs	r2, #70	; 0x46
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	223e      	movs	r2, #62	; 0x3e
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	223f      	movs	r2, #63	; 0x3f
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2241      	movs	r2, #65	; 0x41
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2242      	movs	r2, #66	; 0x42
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2243      	movs	r2, #67	; 0x43
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2244      	movs	r2, #68	; 0x44
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2245      	movs	r2, #69	; 0x45
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	223d      	movs	r2, #61	; 0x3d
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	001a      	movs	r2, r3
 800210e:	1cbb      	adds	r3, r7, #2
 8002110:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2317      	movs	r3, #23
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <HAL_TIM_PWM_Start_DMA+0x32>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	223e      	movs	r2, #62	; 0x3e
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3b02      	subs	r3, #2
 800212a:	425a      	negs	r2, r3
 800212c:	4153      	adcs	r3, r2
 800212e:	b2db      	uxtb	r3, r3
 8002130:	e01f      	b.n	8002172 <HAL_TIM_PWM_Start_DMA+0x72>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d108      	bne.n	800214a <HAL_TIM_PWM_Start_DMA+0x4a>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	223f      	movs	r2, #63	; 0x3f
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3b02      	subs	r3, #2
 8002142:	425a      	negs	r2, r3
 8002144:	4153      	adcs	r3, r2
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e013      	b.n	8002172 <HAL_TIM_PWM_Start_DMA+0x72>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d108      	bne.n	8002162 <HAL_TIM_PWM_Start_DMA+0x62>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2240      	movs	r2, #64	; 0x40
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3b02      	subs	r3, #2
 800215a:	425a      	negs	r2, r3
 800215c:	4153      	adcs	r3, r2
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e007      	b.n	8002172 <HAL_TIM_PWM_Start_DMA+0x72>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2241      	movs	r2, #65	; 0x41
 8002166:	5c9b      	ldrb	r3, [r3, r2]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3b02      	subs	r3, #2
 800216c:	425a      	negs	r2, r3
 800216e:	4153      	adcs	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	e154      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x324>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <HAL_TIM_PWM_Start_DMA+0x92>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	223e      	movs	r2, #62	; 0x3e
 8002184:	5c9b      	ldrb	r3, [r3, r2]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	425a      	negs	r2, r3
 800218c:	4153      	adcs	r3, r2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e01f      	b.n	80021d2 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d108      	bne.n	80021aa <HAL_TIM_PWM_Start_DMA+0xaa>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	5c9b      	ldrb	r3, [r3, r2]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	425a      	negs	r2, r3
 80021a4:	4153      	adcs	r3, r2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e013      	b.n	80021d2 <HAL_TIM_PWM_Start_DMA+0xd2>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d108      	bne.n	80021c2 <HAL_TIM_PWM_Start_DMA+0xc2>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	425a      	negs	r2, r3
 80021bc:	4153      	adcs	r3, r2
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	e007      	b.n	80021d2 <HAL_TIM_PWM_Start_DMA+0xd2>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2241      	movs	r2, #65	; 0x41
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	425a      	negs	r2, r3
 80021ce:	4153      	adcs	r3, r2
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d025      	beq.n	8002222 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_TIM_PWM_Start_DMA+0xe8>
 80021dc:	1cbb      	adds	r3, r7, #2
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e11d      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <HAL_TIM_PWM_Start_DMA+0xf8>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	223e      	movs	r2, #62	; 0x3e
 80021f2:	2102      	movs	r1, #2
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	e016      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0x126>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d104      	bne.n	8002208 <HAL_TIM_PWM_Start_DMA+0x108>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	223f      	movs	r2, #63	; 0x3f
 8002202:	2102      	movs	r1, #2
 8002204:	5499      	strb	r1, [r3, r2]
 8002206:	e00e      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0x126>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d104      	bne.n	8002218 <HAL_TIM_PWM_Start_DMA+0x118>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2240      	movs	r2, #64	; 0x40
 8002212:	2102      	movs	r1, #2
 8002214:	5499      	strb	r1, [r3, r2]
 8002216:	e006      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0x126>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2102      	movs	r1, #2
 800221e:	5499      	strb	r1, [r3, r2]
 8002220:	e001      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0fe      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x324>
  }

  switch (Channel)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d100      	bne.n	800222e <HAL_TIM_PWM_Start_DMA+0x12e>
 800222c:	e080      	b.n	8002330 <HAL_TIM_PWM_Start_DMA+0x230>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d900      	bls.n	8002236 <HAL_TIM_PWM_Start_DMA+0x136>
 8002234:	e0a1      	b.n	800237a <HAL_TIM_PWM_Start_DMA+0x27a>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d054      	beq.n	80022e6 <HAL_TIM_PWM_Start_DMA+0x1e6>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b08      	cmp	r3, #8
 8002240:	d900      	bls.n	8002244 <HAL_TIM_PWM_Start_DMA+0x144>
 8002242:	e09a      	b.n	800237a <HAL_TIM_PWM_Start_DMA+0x27a>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_PWM_Start_DMA+0x152>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d025      	beq.n	800229c <HAL_TIM_PWM_Start_DMA+0x19c>
 8002250:	e093      	b.n	800237a <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	4a74      	ldr	r2, [pc, #464]	; (8002430 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	4a73      	ldr	r2, [pc, #460]	; (8002434 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002268:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3334      	adds	r3, #52	; 0x34
 8002276:	001a      	movs	r2, r3
 8002278:	1cbb      	adds	r3, r7, #2
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	f7fe fe1e 	bl	8000ebc <HAL_DMA_Start_IT>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d001      	beq.n	8002288 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cd      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x324>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0089      	lsls	r1, r1, #2
 8002296:	430a      	orrs	r2, r1
 8002298:	60da      	str	r2, [r3, #12]
      break;
 800229a:	e073      	b.n	8002384 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	4a62      	ldr	r2, [pc, #392]	; (800242c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	4a61      	ldr	r2, [pc, #388]	; (8002430 <HAL_TIM_PWM_Start_DMA+0x330>)
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	4a60      	ldr	r2, [pc, #384]	; (8002434 <HAL_TIM_PWM_Start_DMA+0x334>)
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3338      	adds	r3, #56	; 0x38
 80022c0:	001a      	movs	r2, r3
 80022c2:	1cbb      	adds	r3, r7, #2
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	f7fe fdf9 	bl	8000ebc <HAL_DMA_Start_IT>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0a8      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	00c9      	lsls	r1, r1, #3
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]
      break;
 80022e4:	e04e      	b.n	8002384 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	4a50      	ldr	r2, [pc, #320]	; (800242c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_TIM_PWM_Start_DMA+0x330>)
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_TIM_PWM_Start_DMA+0x334>)
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	333c      	adds	r3, #60	; 0x3c
 800230a:	001a      	movs	r2, r3
 800230c:	1cbb      	adds	r3, r7, #2
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f7fe fdd4 	bl	8000ebc <HAL_DMA_Start_IT>
 8002314:	1e03      	subs	r3, r0, #0
 8002316:	d001      	beq.n	800231c <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e083      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x324>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	0109      	lsls	r1, r1, #4
 800232a:	430a      	orrs	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
      break;
 800232e:	e029      	b.n	8002384 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4a3d      	ldr	r2, [pc, #244]	; (800242c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a3c      	ldr	r2, [pc, #240]	; (8002430 <HAL_TIM_PWM_Start_DMA+0x330>)
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002346:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3340      	adds	r3, #64	; 0x40
 8002354:	001a      	movs	r2, r3
 8002356:	1cbb      	adds	r3, r7, #2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f7fe fdaf 	bl	8000ebc <HAL_DMA_Start_IT>
 800235e:	1e03      	subs	r3, r0, #0
 8002360:	d001      	beq.n	8002366 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e05e      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	0149      	lsls	r1, r1, #5
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]
      break;
 8002378:	e004      	b.n	8002384 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 800237a:	2317      	movs	r3, #23
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
      break;
 8002382:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002384:	2317      	movs	r3, #23
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d147      	bne.n	800241e <HAL_TIM_PWM_Start_DMA+0x31e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	2201      	movs	r2, #1
 8002396:	0018      	movs	r0, r3
 8002398:	f000 fe92 	bl	80030c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a25      	ldr	r2, [pc, #148]	; (8002438 <HAL_TIM_PWM_Start_DMA+0x338>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_TIM_PWM_Start_DMA+0x2ba>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a24      	ldr	r2, [pc, #144]	; (800243c <HAL_TIM_PWM_Start_DMA+0x33c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_TIM_PWM_Start_DMA+0x2ba>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_TIM_PWM_Start_DMA+0x340>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_TIM_PWM_Start_DMA+0x2be>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_TIM_PWM_Start_DMA+0x2c0>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	0209      	lsls	r1, r1, #8
 80023d2:	430a      	orrs	r2, r1
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_TIM_PWM_Start_DMA+0x338>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d004      	beq.n	80023ea <HAL_TIM_PWM_Start_DMA+0x2ea>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_TIM_PWM_Start_DMA+0x344>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d111      	bne.n	800240e <HAL_TIM_PWM_Start_DMA+0x30e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2207      	movs	r2, #7
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d010      	beq.n	800241e <HAL_TIM_PWM_Start_DMA+0x31e>
      {
        __HAL_TIM_ENABLE(htim);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240c:	e007      	b.n	800241e <HAL_TIM_PWM_Start_DMA+0x31e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800241e:	2317      	movs	r3, #23
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}
 800242c:	080029e1 	.word	0x080029e1
 8002430:	08002a8b 	.word	0x08002a8b
 8002434:	0800294d 	.word	0x0800294d
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40014400 	.word	0x40014400
 8002440:	40014800 	.word	0x40014800
 8002444:	40000400 	.word	0x40000400

08002448 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	230f      	movs	r3, #15
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d039      	beq.n	80024d4 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d844      	bhi.n	80024f0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d025      	beq.n	80024b8 <HAL_TIM_PWM_Stop_DMA+0x70>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b08      	cmp	r3, #8
 8002470:	d83e      	bhi.n	80024f0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d00e      	beq.n	800249c <HAL_TIM_PWM_Stop_DMA+0x54>
 800247e:	e037      	b.n	80024f0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4951      	ldr	r1, [pc, #324]	; (80025d0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800248c:	400a      	ands	r2, r1
 800248e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe fd77 	bl	8000f88 <HAL_DMA_Abort_IT>
      break;
 800249a:	e02e      	b.n	80024fa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	494b      	ldr	r1, [pc, #300]	; (80025d4 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe fd69 	bl	8000f88 <HAL_DMA_Abort_IT>
      break;
 80024b6:	e020      	b.n	80024fa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4945      	ldr	r1, [pc, #276]	; (80025d8 <HAL_TIM_PWM_Stop_DMA+0x190>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7fe fd5b 	bl	8000f88 <HAL_DMA_Abort_IT>
      break;
 80024d2:	e012      	b.n	80024fa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	493f      	ldr	r1, [pc, #252]	; (80025dc <HAL_TIM_PWM_Stop_DMA+0x194>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7fe fd4d 	bl	8000f88 <HAL_DMA_Abort_IT>
      break;
 80024ee:	e004      	b.n	80024fa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80024f0:	230f      	movs	r3, #15
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
      break;
 80024f8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80024fa:	230f      	movs	r3, #15
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d15e      	bne.n	80025c2 <HAL_TIM_PWM_Stop_DMA+0x17a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fdd7 	bl	80030c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_TIM_PWM_Stop_DMA+0xe8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a30      	ldr	r2, [pc, #192]	; (80025e4 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_TIM_PWM_Stop_DMA+0xe8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_TIM_PWM_Stop_DMA+0xec>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d013      	beq.n	8002562 <HAL_TIM_PWM_Stop_DMA+0x11a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a2a      	ldr	r2, [pc, #168]	; (80025ec <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8002542:	4013      	ands	r3, r2
 8002544:	d10d      	bne.n	8002562 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 800254e:	4013      	ands	r3, r2
 8002550:	d107      	bne.n	8002562 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4925      	ldr	r1, [pc, #148]	; (80025f4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800255e:	400a      	ands	r2, r1
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 800256a:	4013      	ands	r3, r2
 800256c:	d10d      	bne.n	800258a <HAL_TIM_PWM_Stop_DMA+0x142>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8002576:	4013      	ands	r3, r2
 8002578:	d107      	bne.n	800258a <HAL_TIM_PWM_Stop_DMA+0x142>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2101      	movs	r1, #1
 8002586:	438a      	bics	r2, r1
 8002588:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <HAL_TIM_PWM_Stop_DMA+0x152>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	223e      	movs	r2, #62	; 0x3e
 8002594:	2101      	movs	r1, #1
 8002596:	5499      	strb	r1, [r3, r2]
 8002598:	e013      	b.n	80025c2 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d104      	bne.n	80025aa <HAL_TIM_PWM_Stop_DMA+0x162>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	223f      	movs	r2, #63	; 0x3f
 80025a4:	2101      	movs	r1, #1
 80025a6:	5499      	strb	r1, [r3, r2]
 80025a8:	e00b      	b.n	80025c2 <HAL_TIM_PWM_Stop_DMA+0x17a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d104      	bne.n	80025ba <HAL_TIM_PWM_Stop_DMA+0x172>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]
 80025b8:	e003      	b.n	80025c2 <HAL_TIM_PWM_Stop_DMA+0x17a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2241      	movs	r2, #65	; 0x41
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80025c2:	230f      	movs	r3, #15
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	781b      	ldrb	r3, [r3, #0]
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	fffffdff 	.word	0xfffffdff
 80025d4:	fffffbff 	.word	0xfffffbff
 80025d8:	fffff7ff 	.word	0xfffff7ff
 80025dc:	ffffefff 	.word	0xffffefff
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40014400 	.word	0x40014400
 80025e8:	40014800 	.word	0x40014800
 80025ec:	00001111 	.word	0x00001111
 80025f0:	00000444 	.word	0x00000444
 80025f4:	ffff7fff 	.word	0xffff7fff

080025f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2317      	movs	r3, #23
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	223c      	movs	r2, #60	; 0x3c
 8002610:	5c9b      	ldrb	r3, [r3, r2]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002616:	2302      	movs	r3, #2
 8002618:	e0ad      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	223c      	movs	r2, #60	; 0x3c
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d100      	bne.n	800262a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002628:	e076      	b.n	8002718 <HAL_TIM_PWM_ConfigChannel+0x120>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	d900      	bls.n	8002632 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002630:	e095      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d04e      	beq.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b08      	cmp	r3, #8
 800263c:	d900      	bls.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x48>
 800263e:	e08e      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d021      	beq.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x98>
 800264c:	e087      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fab8 	bl	8002bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2108      	movs	r1, #8
 8002668:	430a      	orrs	r2, r1
 800266a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2104      	movs	r1, #4
 8002678:	438a      	bics	r2, r1
 800267a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6999      	ldr	r1, [r3, #24]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	619a      	str	r2, [r3, #24]
      break;
 800268e:	e06b      	b.n	8002768 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fb15 	bl	8002cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0109      	lsls	r1, r1, #4
 80026ac:	430a      	orrs	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4931      	ldr	r1, [pc, #196]	; (8002780 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026bc:	400a      	ands	r2, r1
 80026be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6999      	ldr	r1, [r3, #24]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	021a      	lsls	r2, r3, #8
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	619a      	str	r2, [r3, #24]
      break;
 80026d4:	e048      	b.n	8002768 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	0011      	movs	r1, r2
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 fb70 	bl	8002dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2108      	movs	r1, #8
 80026f0:	430a      	orrs	r2, r1
 80026f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2104      	movs	r1, #4
 8002700:	438a      	bics	r2, r1
 8002702:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69d9      	ldr	r1, [r3, #28]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
      break;
 8002716:	e027      	b.n	8002768 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f000 fbcf 	bl	8002ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	0109      	lsls	r1, r1, #4
 8002734:	430a      	orrs	r2, r1
 8002736:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	490f      	ldr	r1, [pc, #60]	; (8002780 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002744:	400a      	ands	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69d9      	ldr	r1, [r3, #28]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	021a      	lsls	r2, r3, #8
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	61da      	str	r2, [r3, #28]
      break;
 800275c:	e004      	b.n	8002768 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800275e:	2317      	movs	r3, #23
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
      break;
 8002766:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	223c      	movs	r2, #60	; 0x3c
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

  return status;
 8002770:	2317      	movs	r3, #23
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b006      	add	sp, #24
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	fffffbff 	.word	0xfffffbff

08002784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	230f      	movs	r3, #15
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223c      	movs	r2, #60	; 0x3c
 800279a:	5c9b      	ldrb	r3, [r3, r2]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIM_ConfigClockSource+0x20>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e0bc      	b.n	800291e <HAL_TIM_ConfigClockSource+0x19a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	223c      	movs	r2, #60	; 0x3c
 80027a8:	2101      	movs	r1, #1
 80027aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	223d      	movs	r2, #61	; 0x3d
 80027b0:	2102      	movs	r1, #2
 80027b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2277      	movs	r2, #119	; 0x77
 80027c0:	4393      	bics	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_TIM_ConfigClockSource+0x1a4>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0192      	lsls	r2, r2, #6
 80027dc:	4293      	cmp	r3, r2
 80027de:	d040      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xde>
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0192      	lsls	r2, r2, #6
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d900      	bls.n	80027ea <HAL_TIM_ConfigClockSource+0x66>
 80027e8:	e088      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	0152      	lsls	r2, r2, #5
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d100      	bne.n	80027f4 <HAL_TIM_ConfigClockSource+0x70>
 80027f2:	e088      	b.n	8002906 <HAL_TIM_ConfigClockSource+0x182>
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0152      	lsls	r2, r2, #5
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d900      	bls.n	80027fe <HAL_TIM_ConfigClockSource+0x7a>
 80027fc:	e07e      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 80027fe:	2b70      	cmp	r3, #112	; 0x70
 8002800:	d018      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0xb0>
 8002802:	d900      	bls.n	8002806 <HAL_TIM_ConfigClockSource+0x82>
 8002804:	e07a      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 8002806:	2b60      	cmp	r3, #96	; 0x60
 8002808:	d04f      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x126>
 800280a:	d900      	bls.n	800280e <HAL_TIM_ConfigClockSource+0x8a>
 800280c:	e076      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 800280e:	2b50      	cmp	r3, #80	; 0x50
 8002810:	d03b      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x106>
 8002812:	d900      	bls.n	8002816 <HAL_TIM_ConfigClockSource+0x92>
 8002814:	e072      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d057      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0x146>
 800281a:	d900      	bls.n	800281e <HAL_TIM_ConfigClockSource+0x9a>
 800281c:	e06e      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 800281e:	2b30      	cmp	r3, #48	; 0x30
 8002820:	d063      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x166>
 8002822:	d86b      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 8002824:	2b20      	cmp	r3, #32
 8002826:	d060      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x166>
 8002828:	d868      	bhi.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d05d      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x166>
 800282e:	2b10      	cmp	r3, #16
 8002830:	d05b      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x166>
 8002832:	e063      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f000 fc1c 	bl	8003080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2277      	movs	r2, #119	; 0x77
 8002854:	4313      	orrs	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	609a      	str	r2, [r3, #8]
      break;
 8002860:	e052      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f000 fc05 	bl	8003080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	01c9      	lsls	r1, r1, #7
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
      break;
 8002888:	e03e      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	001a      	movs	r2, r3
 8002898:	f000 fb78 	bl	8002f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2150      	movs	r1, #80	; 0x50
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fbd2 	bl	800304c <TIM_ITRx_SetConfig>
      break;
 80028a8:	e02e      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	001a      	movs	r2, r3
 80028b8:	f000 fb96 	bl	8002fe8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2160      	movs	r1, #96	; 0x60
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 fbc2 	bl	800304c <TIM_ITRx_SetConfig>
      break;
 80028c8:	e01e      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	001a      	movs	r2, r3
 80028d8:	f000 fb58 	bl	8002f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2140      	movs	r1, #64	; 0x40
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fbb2 	bl	800304c <TIM_ITRx_SetConfig>
      break;
 80028e8:	e00e      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0019      	movs	r1, r3
 80028f4:	0010      	movs	r0, r2
 80028f6:	f000 fba9 	bl	800304c <TIM_ITRx_SetConfig>
      break;
 80028fa:	e005      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80028fc:	230f      	movs	r3, #15
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
      break;
 8002904:	e000      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002906:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	223d      	movs	r2, #61	; 0x3d
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	223c      	movs	r2, #60	; 0x3c
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]

  return status;
 8002918:	230f      	movs	r3, #15
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	ffff00ff 	.word	0xffff00ff

0800292c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}

0800294c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	223e      	movs	r2, #62	; 0x3e
 800296e:	2101      	movs	r1, #1
 8002970:	5499      	strb	r1, [r3, r2]
 8002972:	e02a      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d107      	bne.n	800298e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2202      	movs	r2, #2
 8002982:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	223f      	movs	r2, #63	; 0x3f
 8002988:	2101      	movs	r1, #1
 800298a:	5499      	strb	r1, [r3, r2]
 800298c:	e01d      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d107      	bne.n	80029a8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2204      	movs	r2, #4
 800299c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]
 80029a6:	e010      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d107      	bne.n	80029c2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2208      	movs	r2, #8
 80029b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2241      	movs	r2, #65	; 0x41
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]
 80029c0:	e003      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	223d      	movs	r2, #61	; 0x3d
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff ffb5 	bl	800293c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}

080029e0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10b      	bne.n	8002a10 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d136      	bne.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	223e      	movs	r2, #62	; 0x3e
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	e031      	b.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10b      	bne.n	8002a32 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d125      	bne.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	223f      	movs	r2, #63	; 0x3f
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	5499      	strb	r1, [r3, r2]
 8002a30:	e020      	b.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d10b      	bne.n	8002a54 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d114      	bne.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	e00f      	b.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10a      	bne.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2208      	movs	r2, #8
 8002a62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d103      	bne.n	8002a74 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2241      	movs	r2, #65	; 0x41
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fd fbd2 	bl	8000220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	771a      	strb	r2, [r3, #28]
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d103      	bne.n	8002aaa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	771a      	strb	r2, [r3, #28]
 8002aa8:	e019      	b.n	8002ade <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d103      	bne.n	8002abc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	771a      	strb	r2, [r3, #28]
 8002aba:	e010      	b.n	8002ade <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d103      	bne.n	8002ace <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	771a      	strb	r2, [r3, #28]
 8002acc:	e007      	b.n	8002ade <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d102      	bne.n	8002ade <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2208      	movs	r2, #8
 8002adc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7ff ff23 	bl	800292c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b004      	add	sp, #16
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <TIM_Base_SetConfig+0xc0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x20>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <TIM_Base_SetConfig+0xc4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2270      	movs	r2, #112	; 0x70
 8002b18:	4393      	bics	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <TIM_Base_SetConfig+0xc0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00f      	beq.n	8002b4e <TIM_Base_SetConfig+0x5a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <TIM_Base_SetConfig+0xc4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x5a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <TIM_Base_SetConfig+0xc8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x5a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <TIM_Base_SetConfig+0xcc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x5a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <TIM_Base_SetConfig+0xd0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <TIM_Base_SetConfig+0xd4>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	4393      	bics	r3, r2
 8002b66:	001a      	movs	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <TIM_Base_SetConfig+0xc0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <TIM_Base_SetConfig+0xaa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <TIM_Base_SetConfig+0xcc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d003      	beq.n	8002b9e <TIM_Base_SetConfig+0xaa>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <TIM_Base_SetConfig+0xd0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d103      	bne.n	8002ba6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	615a      	str	r2, [r3, #20]
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b004      	add	sp, #16
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40002000 	.word	0x40002000
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800
 8002bc8:	fffffcff 	.word	0xfffffcff

08002bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4393      	bics	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2270      	movs	r2, #112	; 0x70
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2203      	movs	r2, #3
 8002c02:	4393      	bics	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4393      	bics	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <TIM_OC1_SetConfig+0xe8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_OC1_SetConfig+0x6e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <TIM_OC1_SetConfig+0xec>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC1_SetConfig+0x6e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <TIM_OC1_SetConfig+0xf0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10c      	bne.n	8002c54 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4393      	bics	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4393      	bics	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <TIM_OC1_SetConfig+0xe8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_OC1_SetConfig+0xa0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <TIM_OC1_SetConfig+0xec>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC1_SetConfig+0xa0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <TIM_OC1_SetConfig+0xf0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <TIM_OC1_SetConfig+0xf4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <TIM_OC1_SetConfig+0xf8>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b006      	add	sp, #24
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800
 8002cc0:	fffffeff 	.word	0xfffffeff
 8002cc4:	fffffdff 	.word	0xfffffdff

08002cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	4393      	bics	r3, r2
 8002cda:	001a      	movs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a2c      	ldr	r2, [pc, #176]	; (8002da8 <TIM_OC2_SetConfig+0xe0>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <TIM_OC2_SetConfig+0xe4>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2220      	movs	r2, #32
 8002d12:	4393      	bics	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <TIM_OC2_SetConfig+0xe8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10d      	bne.n	8002d46 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	4393      	bics	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2240      	movs	r2, #64	; 0x40
 8002d42:	4393      	bics	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <TIM_OC2_SetConfig+0xe8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <TIM_OC2_SetConfig+0x96>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <TIM_OC2_SetConfig+0xec>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d003      	beq.n	8002d5e <TIM_OC2_SetConfig+0x96>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <TIM_OC2_SetConfig+0xf0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d113      	bne.n	8002d86 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <TIM_OC2_SetConfig+0xf4>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <TIM_OC2_SetConfig+0xf8>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b006      	add	sp, #24
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	ffff8fff 	.word	0xffff8fff
 8002dac:	fffffcff 	.word	0xfffffcff
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	fffffbff 	.word	0xfffffbff
 8002dc0:	fffff7ff 	.word	0xfffff7ff

08002dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a33      	ldr	r2, [pc, #204]	; (8002ea0 <TIM_OC3_SetConfig+0xdc>)
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2270      	movs	r2, #112	; 0x70
 8002df0:	4393      	bics	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2203      	movs	r2, #3
 8002df8:	4393      	bics	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <TIM_OC3_SetConfig+0xe0>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <TIM_OC3_SetConfig+0xe4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d10d      	bne.n	8002e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <TIM_OC3_SetConfig+0xe8>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <TIM_OC3_SetConfig+0xec>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <TIM_OC3_SetConfig+0xe4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <TIM_OC3_SetConfig+0x92>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <TIM_OC3_SetConfig+0xf0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_OC3_SetConfig+0x92>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <TIM_OC3_SetConfig+0xf4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d113      	bne.n	8002e7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <TIM_OC3_SetConfig+0xf8>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <TIM_OC3_SetConfig+0xfc>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	621a      	str	r2, [r3, #32]
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b006      	add	sp, #24
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	fffffeff 	.word	0xfffffeff
 8002ea4:	fffffdff 	.word	0xfffffdff
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	fffff7ff 	.word	0xfffff7ff
 8002eb0:	fffffbff 	.word	0xfffffbff
 8002eb4:	40014400 	.word	0x40014400
 8002eb8:	40014800 	.word	0x40014800
 8002ebc:	ffffefff 	.word	0xffffefff
 8002ec0:	ffffdfff 	.word	0xffffdfff

08002ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <TIM_OC4_SetConfig+0xa8>)
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <TIM_OC4_SetConfig+0xac>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <TIM_OC4_SetConfig+0xb0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <TIM_OC4_SetConfig+0xb4>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	031b      	lsls	r3, r3, #12
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <TIM_OC4_SetConfig+0xb8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <TIM_OC4_SetConfig+0x70>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <TIM_OC4_SetConfig+0xbc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_OC4_SetConfig+0x70>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <TIM_OC4_SetConfig+0xc0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d109      	bne.n	8002f48 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <TIM_OC4_SetConfig+0xc4>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b006      	add	sp, #24
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	ffffefff 	.word	0xffffefff
 8002f70:	ffff8fff 	.word	0xffff8fff
 8002f74:	fffffcff 	.word	0xfffffcff
 8002f78:	ffffdfff 	.word	0xffffdfff
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40014400 	.word	0x40014400
 8002f84:	40014800 	.word	0x40014800
 8002f88:	ffffbfff 	.word	0xffffbfff

08002f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4393      	bics	r3, r2
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	22f0      	movs	r2, #240	; 0xf0
 8002fb6:	4393      	bics	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	220a      	movs	r2, #10
 8002fc8:	4393      	bics	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	621a      	str	r2, [r3, #32]
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b006      	add	sp, #24
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <TIM_TI2_ConfigInputStage+0x60>)
 8003012:	4013      	ands	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	22a0      	movs	r2, #160	; 0xa0
 8003024:	4393      	bics	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	621a      	str	r2, [r3, #32]
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b006      	add	sp, #24
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	ffff0fff 	.word	0xffff0fff

0800304c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2270      	movs	r2, #112	; 0x70
 8003060:	4393      	bics	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	2207      	movs	r2, #7
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	609a      	str	r2, [r3, #8]
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b004      	add	sp, #16
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <TIM_ETR_SetConfig+0x3c>)
 8003098:	4013      	ands	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	021a      	lsls	r2, r3, #8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b006      	add	sp, #24
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	ffff00ff 	.word	0xffff00ff

080030c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	221f      	movs	r2, #31
 80030d0:	4013      	ands	r3, r2
 80030d2:	2201      	movs	r2, #1
 80030d4:	409a      	lsls	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	43d2      	mvns	r2, r2
 80030e2:	401a      	ands	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	211f      	movs	r1, #31
 80030f0:	400b      	ands	r3, r1
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4099      	lsls	r1, r3
 80030f6:	000b      	movs	r3, r1
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b006      	add	sp, #24
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	223c      	movs	r2, #60	; 0x3c
 8003116:	5c9b      	ldrb	r3, [r3, r2]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800311c:	2302      	movs	r3, #2
 800311e:	e03c      	b.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	223c      	movs	r2, #60	; 0x3c
 8003124:	2101      	movs	r1, #1
 8003126:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	223d      	movs	r2, #61	; 0x3d
 800312c:	2102      	movs	r1, #2
 800312e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2270      	movs	r2, #112	; 0x70
 8003144:	4393      	bics	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10c      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	4393      	bics	r3, r2
 8003174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	223d      	movs	r2, #61	; 0x3d
 800318c:	2101      	movs	r1, #1
 800318e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	223c      	movs	r2, #60	; 0x3c
 8003194:	2100      	movs	r1, #0
 8003196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40000400 	.word	0x40000400

080031ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e044      	b.n	8003248 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d107      	bne.n	80031d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2274      	movs	r2, #116	; 0x74
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fd fbd7 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2224      	movs	r2, #36	; 0x24
 80031da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2101      	movs	r1, #1
 80031e8:	438a      	bics	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f956 	bl	80034a0 <UART_SetConfig>
 80031f4:	0003      	movs	r3, r0
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e024      	b.n	8003248 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	0018      	movs	r0, r3
 800320a:	f000 fa73 	bl	80036f4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	490d      	ldr	r1, [pc, #52]	; (8003250 <HAL_UART_Init+0xa4>)
 800321a:	400a      	ands	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2108      	movs	r1, #8
 800322a:	438a      	bics	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	0018      	movs	r0, r3
 8003242:	f000 fb0b 	bl	800385c <UART_CheckIdleState>
 8003246:	0003      	movs	r3, r0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	fffff7ff 	.word	0xfffff7ff

08003254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	1dbb      	adds	r3, r7, #6
 8003262:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003268:	2b20      	cmp	r3, #32
 800326a:	d000      	beq.n	800326e <HAL_UART_Transmit+0x1a>
 800326c:	e096      	b.n	800339c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_UART_Transmit+0x28>
 8003274:	1dbb      	adds	r3, r7, #6
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e08e      	b.n	800339e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	015b      	lsls	r3, r3, #5
 8003288:	429a      	cmp	r2, r3
 800328a:	d109      	bne.n	80032a0 <HAL_UART_Transmit+0x4c>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2201      	movs	r2, #1
 8003298:	4013      	ands	r3, r2
 800329a:	d001      	beq.n	80032a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e07e      	b.n	800339e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2274      	movs	r2, #116	; 0x74
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Transmit+0x5a>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e077      	b.n	800339e <HAL_UART_Transmit+0x14a>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2274      	movs	r2, #116	; 0x74
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	2100      	movs	r1, #0
 80032bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c4:	f7fd fcca 	bl	8000c5c <HAL_GetTick>
 80032c8:	0003      	movs	r3, r0
 80032ca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1dba      	adds	r2, r7, #6
 80032d0:	2150      	movs	r1, #80	; 0x50
 80032d2:	8812      	ldrh	r2, [r2, #0]
 80032d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1dba      	adds	r2, r7, #6
 80032da:	2152      	movs	r1, #82	; 0x52
 80032dc:	8812      	ldrh	r2, [r2, #0]
 80032de:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d108      	bne.n	80032fe <HAL_UART_Transmit+0xaa>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	e003      	b.n	8003306 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2274      	movs	r2, #116	; 0x74
 800330a:	2100      	movs	r1, #0
 800330c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800330e:	e02d      	b.n	800336c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	0013      	movs	r3, r2
 800331a:	2200      	movs	r2, #0
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	f000 fae5 	bl	80038ec <UART_WaitOnFlagUntilTimeout>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e039      	b.n	800339e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	881a      	ldrh	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	05d2      	lsls	r2, r2, #23
 800333a:	0dd2      	lsrs	r2, r2, #23
 800333c:	b292      	uxth	r2, r2
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	3302      	adds	r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e008      	b.n	800335a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	b292      	uxth	r2, r2
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2252      	movs	r2, #82	; 0x52
 800335e:	5a9b      	ldrh	r3, [r3, r2]
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b299      	uxth	r1, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2252      	movs	r2, #82	; 0x52
 800336a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2252      	movs	r2, #82	; 0x52
 8003370:	5a9b      	ldrh	r3, [r3, r2]
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1cb      	bne.n	8003310 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	0013      	movs	r3, r2
 8003382:	2200      	movs	r2, #0
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	f000 fab1 	bl	80038ec <UART_WaitOnFlagUntilTimeout>
 800338a:	1e03      	subs	r3, r0, #0
 800338c:	d001      	beq.n	8003392 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e005      	b.n	800339e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b008      	add	sp, #32
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b088      	sub	sp, #32
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	1dbb      	adds	r3, r7, #6
 80033b2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d150      	bne.n	800345e <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_UART_Receive_DMA+0x24>
 80033c2:	1dbb      	adds	r3, r7, #6
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e048      	b.n	8003460 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	015b      	lsls	r3, r3, #5
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d109      	bne.n	80033ee <HAL_UART_Receive_DMA+0x48>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2201      	movs	r2, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	d001      	beq.n	80033ee <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e038      	b.n	8003460 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2274      	movs	r2, #116	; 0x74
 80033f2:	5c9b      	ldrb	r3, [r3, r2]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Receive_DMA+0x56>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e031      	b.n	8003460 <HAL_UART_Receive_DMA+0xba>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2274      	movs	r2, #116	; 0x74
 8003400:	2101      	movs	r1, #1
 8003402:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	4013      	ands	r3, r2
 8003416:	d019      	beq.n	800344c <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003418:	f3ef 8310 	mrs	r3, PRIMASK
 800341c:	613b      	str	r3, [r7, #16]
  return(result);
 800341e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	2301      	movs	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	04c9      	lsls	r1, r1, #19
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	881a      	ldrh	r2, [r3, #0]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	0018      	movs	r0, r3
 8003456:	f000 fb0d 	bl	8003a74 <UART_Start_Receive_DMA>
 800345a:	0003      	movs	r3, r0
 800345c:	e000      	b.n	8003460 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 800345e:	2302      	movs	r3, #2
  }
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b008      	add	sp, #32
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	000a      	movs	r2, r1
 8003492:	1cbb      	adds	r3, r7, #2
 8003494:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b002      	add	sp, #8
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a8:	231e      	movs	r3, #30
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a84      	ldr	r2, [pc, #528]	; (80036e0 <UART_SetConfig+0x240>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	0019      	movs	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a7f      	ldr	r2, [pc, #508]	; (80036e4 <UART_SetConfig+0x244>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a76      	ldr	r2, [pc, #472]	; (80036e8 <UART_SetConfig+0x248>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351c:	4b73      	ldr	r3, [pc, #460]	; (80036ec <UART_SetConfig+0x24c>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	2203      	movs	r2, #3
 8003522:	4013      	ands	r3, r2
 8003524:	2b03      	cmp	r3, #3
 8003526:	d00d      	beq.n	8003544 <UART_SetConfig+0xa4>
 8003528:	d81b      	bhi.n	8003562 <UART_SetConfig+0xc2>
 800352a:	2b02      	cmp	r3, #2
 800352c:	d014      	beq.n	8003558 <UART_SetConfig+0xb8>
 800352e:	d818      	bhi.n	8003562 <UART_SetConfig+0xc2>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <UART_SetConfig+0x9a>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d00a      	beq.n	800354e <UART_SetConfig+0xae>
 8003538:	e013      	b.n	8003562 <UART_SetConfig+0xc2>
 800353a:	231f      	movs	r3, #31
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e012      	b.n	800356a <UART_SetConfig+0xca>
 8003544:	231f      	movs	r3, #31
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2202      	movs	r2, #2
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e00d      	b.n	800356a <UART_SetConfig+0xca>
 800354e:	231f      	movs	r3, #31
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2204      	movs	r2, #4
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e008      	b.n	800356a <UART_SetConfig+0xca>
 8003558:	231f      	movs	r3, #31
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	2208      	movs	r2, #8
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e003      	b.n	800356a <UART_SetConfig+0xca>
 8003562:	231f      	movs	r3, #31
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2210      	movs	r2, #16
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	429a      	cmp	r2, r3
 8003576:	d15d      	bne.n	8003634 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003578:	231f      	movs	r3, #31
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b08      	cmp	r3, #8
 8003580:	d015      	beq.n	80035ae <UART_SetConfig+0x10e>
 8003582:	dc18      	bgt.n	80035b6 <UART_SetConfig+0x116>
 8003584:	2b04      	cmp	r3, #4
 8003586:	d00d      	beq.n	80035a4 <UART_SetConfig+0x104>
 8003588:	dc15      	bgt.n	80035b6 <UART_SetConfig+0x116>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <UART_SetConfig+0xf4>
 800358e:	2b02      	cmp	r3, #2
 8003590:	d005      	beq.n	800359e <UART_SetConfig+0xfe>
 8003592:	e010      	b.n	80035b6 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7fe fc28 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8003598:	0003      	movs	r3, r0
 800359a:	61bb      	str	r3, [r7, #24]
        break;
 800359c:	e012      	b.n	80035c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800359e:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <UART_SetConfig+0x250>)
 80035a0:	61bb      	str	r3, [r7, #24]
        break;
 80035a2:	e00f      	b.n	80035c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a4:	f7fe fbb0 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 80035a8:	0003      	movs	r3, r0
 80035aa:	61bb      	str	r3, [r7, #24]
        break;
 80035ac:	e00a      	b.n	80035c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	61bb      	str	r3, [r7, #24]
        break;
 80035b4:	e006      	b.n	80035c4 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ba:	231e      	movs	r3, #30
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
        break;
 80035c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <UART_SetConfig+0x12c>
 80035ca:	e07b      	b.n	80036c4 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	005a      	lsls	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	18d2      	adds	r2, r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0019      	movs	r1, r3
 80035de:	0010      	movs	r0, r2
 80035e0:	f7fc fd92 	bl	8000108 <__udivsi3>
 80035e4:	0003      	movs	r3, r0
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d91c      	bls.n	800362a <UART_SetConfig+0x18a>
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	025b      	lsls	r3, r3, #9
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d217      	bcs.n	800362a <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	200e      	movs	r0, #14
 8003600:	183b      	adds	r3, r7, r0
 8003602:	210f      	movs	r1, #15
 8003604:	438a      	bics	r2, r1
 8003606:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	2207      	movs	r2, #7
 8003610:	4013      	ands	r3, r2
 8003612:	b299      	uxth	r1, r3
 8003614:	183b      	adds	r3, r7, r0
 8003616:	183a      	adds	r2, r7, r0
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	183a      	adds	r2, r7, r0
 8003624:	8812      	ldrh	r2, [r2, #0]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	e04c      	b.n	80036c4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800362a:	231e      	movs	r3, #30
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e047      	b.n	80036c4 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003634:	231f      	movs	r3, #31
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b08      	cmp	r3, #8
 800363c:	d015      	beq.n	800366a <UART_SetConfig+0x1ca>
 800363e:	dc18      	bgt.n	8003672 <UART_SetConfig+0x1d2>
 8003640:	2b04      	cmp	r3, #4
 8003642:	d00d      	beq.n	8003660 <UART_SetConfig+0x1c0>
 8003644:	dc15      	bgt.n	8003672 <UART_SetConfig+0x1d2>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <UART_SetConfig+0x1b0>
 800364a:	2b02      	cmp	r3, #2
 800364c:	d005      	beq.n	800365a <UART_SetConfig+0x1ba>
 800364e:	e010      	b.n	8003672 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7fe fbca 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8003654:	0003      	movs	r3, r0
 8003656:	61bb      	str	r3, [r7, #24]
        break;
 8003658:	e012      	b.n	8003680 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365a:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <UART_SetConfig+0x250>)
 800365c:	61bb      	str	r3, [r7, #24]
        break;
 800365e:	e00f      	b.n	8003680 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003660:	f7fe fb52 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8003664:	0003      	movs	r3, r0
 8003666:	61bb      	str	r3, [r7, #24]
        break;
 8003668:	e00a      	b.n	8003680 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e006      	b.n	8003680 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003676:	231e      	movs	r3, #30
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2201      	movs	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]
        break;
 800367e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01e      	beq.n	80036c4 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	085a      	lsrs	r2, r3, #1
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	18d2      	adds	r2, r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0019      	movs	r1, r3
 8003696:	0010      	movs	r0, r2
 8003698:	f7fc fd36 	bl	8000108 <__udivsi3>
 800369c:	0003      	movs	r3, r0
 800369e:	b29b      	uxth	r3, r3
 80036a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d909      	bls.n	80036bc <UART_SetConfig+0x21c>
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d204      	bcs.n	80036bc <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	e003      	b.n	80036c4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80036bc:	231e      	movs	r3, #30
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036d0:	231e      	movs	r3, #30
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	781b      	ldrb	r3, [r3, #0]
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b008      	add	sp, #32
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	ffff69f3 	.word	0xffff69f3
 80036e4:	ffffcfff 	.word	0xffffcfff
 80036e8:	fffff4ff 	.word	0xfffff4ff
 80036ec:	40021000 	.word	0x40021000
 80036f0:	007a1200 	.word	0x007a1200

080036f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d00b      	beq.n	800371e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a4a      	ldr	r2, [pc, #296]	; (8003838 <UART_AdvFeatureConfig+0x144>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2202      	movs	r2, #2
 8003724:	4013      	ands	r3, r2
 8003726:	d00b      	beq.n	8003740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a43      	ldr	r2, [pc, #268]	; (800383c <UART_AdvFeatureConfig+0x148>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2204      	movs	r2, #4
 8003746:	4013      	ands	r3, r2
 8003748:	d00b      	beq.n	8003762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <UART_AdvFeatureConfig+0x14c>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2208      	movs	r2, #8
 8003768:	4013      	ands	r3, r2
 800376a:	d00b      	beq.n	8003784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a34      	ldr	r2, [pc, #208]	; (8003844 <UART_AdvFeatureConfig+0x150>)
 8003774:	4013      	ands	r3, r2
 8003776:	0019      	movs	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2210      	movs	r2, #16
 800378a:	4013      	ands	r3, r2
 800378c:	d00b      	beq.n	80037a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a2c      	ldr	r2, [pc, #176]	; (8003848 <UART_AdvFeatureConfig+0x154>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2220      	movs	r2, #32
 80037ac:	4013      	ands	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4a25      	ldr	r2, [pc, #148]	; (800384c <UART_AdvFeatureConfig+0x158>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	4013      	ands	r3, r2
 80037d0:	d01d      	beq.n	800380e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <UART_AdvFeatureConfig+0x15c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	035b      	lsls	r3, r3, #13
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10b      	bne.n	800380e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <UART_AdvFeatureConfig+0x160>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	4013      	ands	r3, r2
 8003816:	d00b      	beq.n	8003830 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <UART_AdvFeatureConfig+0x164>)
 8003820:	4013      	ands	r3, r2
 8003822:	0019      	movs	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
  }
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}
 8003838:	fffdffff 	.word	0xfffdffff
 800383c:	fffeffff 	.word	0xfffeffff
 8003840:	fffbffff 	.word	0xfffbffff
 8003844:	ffff7fff 	.word	0xffff7fff
 8003848:	ffffefff 	.word	0xffffefff
 800384c:	ffffdfff 	.word	0xffffdfff
 8003850:	ffefffff 	.word	0xffefffff
 8003854:	ff9fffff 	.word	0xff9fffff
 8003858:	fff7ffff 	.word	0xfff7ffff

0800385c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	2100      	movs	r1, #0
 800386a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800386c:	f7fd f9f6 	bl	8000c5c <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2208      	movs	r2, #8
 800387c:	4013      	ands	r3, r2
 800387e:	2b08      	cmp	r3, #8
 8003880:	d10c      	bne.n	800389c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0391      	lsls	r1, r2, #14
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <UART_CheckIdleState+0x8c>)
 800388c:	9200      	str	r2, [sp, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	f000 f82c 	bl	80038ec <UART_WaitOnFlagUntilTimeout>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d001      	beq.n	800389c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e021      	b.n	80038e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2204      	movs	r2, #4
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d10c      	bne.n	80038c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	03d1      	lsls	r1, r2, #15
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <UART_CheckIdleState+0x8c>)
 80038b4:	9200      	str	r2, [sp, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f000 f818 	bl	80038ec <UART_WaitOnFlagUntilTimeout>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d001      	beq.n	80038c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e00d      	b.n	80038e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2274      	movs	r2, #116	; 0x74
 80038da:	2100      	movs	r1, #0
 80038dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	01ffffff 	.word	0x01ffffff

080038ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b094      	sub	sp, #80	; 0x50
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fc:	e0a3      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003900:	3301      	adds	r3, #1
 8003902:	d100      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003904:	e09f      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fd f9a9 	bl	8000c5c <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <UART_WaitOnFlagUntilTimeout+0x30>
 8003916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003918:	2b00      	cmp	r3, #0
 800391a:	d13d      	bne.n	8003998 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391c:	f3ef 8310 	mrs	r3, PRIMASK
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
 8003926:	2301      	movs	r3, #1
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	494c      	ldr	r1, [pc, #304]	; (8003a70 <UART_WaitOnFlagUntilTimeout+0x184>)
 800393e:	400a      	ands	r2, r1
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	f383 8810 	msr	PRIMASK, r3
}
 800394c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394e:	f3ef 8310 	mrs	r3, PRIMASK
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	643b      	str	r3, [r7, #64]	; 0x40
 8003958:	2301      	movs	r3, #1
 800395a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	f383 8810 	msr	PRIMASK, r3
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2101      	movs	r1, #1
 8003970:	438a      	bics	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	f383 8810 	msr	PRIMASK, r3
}
 800397e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2274      	movs	r2, #116	; 0x74
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e067      	b.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2204      	movs	r2, #4
 80039a0:	4013      	ands	r3, r2
 80039a2:	d050      	beq.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	401a      	ands	r2, r3
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d146      	bne.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c2:	f3ef 8310 	mrs	r3, PRIMASK
 80039c6:	613b      	str	r3, [r7, #16]
  return(result);
 80039c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039cc:	2301      	movs	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4923      	ldr	r1, [pc, #140]	; (8003a70 <UART_WaitOnFlagUntilTimeout+0x184>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f4:	f3ef 8310 	mrs	r3, PRIMASK
 80039f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80039fa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80039fe:	2301      	movs	r3, #1
 8003a00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f383 8810 	msr	PRIMASK, r3
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	438a      	bics	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	2120      	movs	r1, #32
 8003a38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2274      	movs	r2, #116	; 0x74
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e010      	b.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	425a      	negs	r2, r3
 8003a56:	4153      	adcs	r3, r2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d100      	bne.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003a64:	e74b      	b.n	80038fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b014      	add	sp, #80	; 0x50
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	fffffe5f 	.word	0xfffffe5f

08003a74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b090      	sub	sp, #64	; 0x40
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	1dbb      	adds	r3, r7, #6
 8003a80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1dba      	adds	r2, r7, #6
 8003a8c:	2158      	movs	r1, #88	; 0x58
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	2100      	movs	r1, #0
 8003a98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2222      	movs	r2, #34	; 0x22
 8003a9e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d02b      	beq.n	8003b00 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a3f      	ldr	r2, [pc, #252]	; (8003bac <UART_Start_Receive_DMA+0x138>)
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a3e      	ldr	r2, [pc, #248]	; (8003bb0 <UART_Start_Receive_DMA+0x13c>)
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a3d      	ldr	r2, [pc, #244]	; (8003bb4 <UART_Start_Receive_DMA+0x140>)
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3324      	adds	r3, #36	; 0x24
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	001a      	movs	r2, r3
 8003ada:	1dbb      	adds	r3, r7, #6
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	f7fd f9ed 	bl	8000ebc <HAL_DMA_Start_IT>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d00c      	beq.n	8003b00 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	2110      	movs	r1, #16
 8003aec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2274      	movs	r2, #116	; 0x74
 8003af2:	2100      	movs	r1, #0
 8003af4:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e050      	b.n	8003ba2 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2274      	movs	r2, #116	; 0x74
 8003b04:	2100      	movs	r1, #0
 8003b06:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b08:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b0e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f383 8810 	msr	PRIMASK, r3
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	0049      	lsls	r1, r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b40:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b42:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b46:	2301      	movs	r3, #1
 8003b48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
 8003b78:	2301      	movs	r3, #1
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	f383 8810 	msr	PRIMASK, r3
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2140      	movs	r1, #64	; 0x40
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	f383 8810 	msr	PRIMASK, r3
}
 8003b9e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b010      	add	sp, #64	; 0x40
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	08003cc5 	.word	0x08003cc5
 8003bb0:	08003de9 	.word	0x08003de9
 8003bb4:	08003e25 	.word	0x08003e25

08003bb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	21c0      	movs	r1, #192	; 0xc0
 8003be2:	438a      	bics	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b006      	add	sp, #24
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c08:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
 8003c12:	2301      	movs	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4925      	ldr	r1, [pc, #148]	; (8003cc0 <UART_EndRxTransfer+0xc0>)
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3e:	623b      	str	r3, [r7, #32]
  return(result);
 8003c40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
 8003c44:	2301      	movs	r3, #1
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f383 8810 	msr	PRIMASK, r3
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	438a      	bics	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d118      	bne.n	8003ca6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c74:	f3ef 8310 	mrs	r3, PRIMASK
 8003c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7e:	2301      	movs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2110      	movs	r1, #16
 8003c96:	438a      	bics	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b00e      	add	sp, #56	; 0x38
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	fffffedf 	.word	0xfffffedf

08003cc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b094      	sub	sp, #80	; 0x50
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d06e      	beq.n	8003db8 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8003cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cdc:	225a      	movs	r2, #90	; 0x5a
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ce8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cec:	2301      	movs	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f383 8810 	msr	PRIMASK, r3
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4938      	ldr	r1, [pc, #224]	; (8003de4 <UART_DMAReceiveCplt+0x120>)
 8003d04:	400a      	ands	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f383 8810 	msr	PRIMASK, r3
}
 8003d12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d14:	f3ef 8310 	mrs	r3, PRIMASK
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1e:	2301      	movs	r3, #1
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2101      	movs	r1, #1
 8003d36:	438a      	bics	r2, r1
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d50:	2301      	movs	r3, #1
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2140      	movs	r1, #64	; 0x40
 8003d68:	438a      	bics	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d118      	bne.n	8003db8 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d90:	2301      	movs	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2110      	movs	r1, #16
 8003da8:	438a      	bics	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d108      	bne.n	8003dd2 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	2258      	movs	r2, #88	; 0x58
 8003dc4:	5a9a      	ldrh	r2, [r3, r2]
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc8:	0011      	movs	r1, r2
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7ff fb5c 	bl	8003488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dd0:	e003      	b.n	8003dda <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7fc fb57 	bl	8000488 <HAL_UART_RxCpltCallback>
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b014      	add	sp, #80	; 0x50
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	fffffeff 	.word	0xfffffeff

08003de8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d10a      	bne.n	8003e14 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2258      	movs	r2, #88	; 0x58
 8003e02:	5a9b      	ldrh	r3, [r3, r2]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7ff fb3b 	bl	8003488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e12:	e003      	b.n	8003e1c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff fb26 	bl	8003468 <HAL_UART_RxHalfCpltCallback>
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b004      	add	sp, #16
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d10a      	bne.n	8003e62 <UART_DMAError+0x3e>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b21      	cmp	r3, #33	; 0x21
 8003e50:	d107      	bne.n	8003e62 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2252      	movs	r2, #82	; 0x52
 8003e56:	2100      	movs	r1, #0
 8003e58:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7ff feab 	bl	8003bb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2240      	movs	r2, #64	; 0x40
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d10a      	bne.n	8003e86 <UART_DMAError+0x62>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b22      	cmp	r3, #34	; 0x22
 8003e74:	d107      	bne.n	8003e86 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	225a      	movs	r2, #90	; 0x5a
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff febd 	bl	8003c00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2280      	movs	r2, #128	; 0x80
 8003e8a:	589b      	ldr	r3, [r3, r2]
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2180      	movs	r1, #128	; 0x80
 8003e94:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff faed 	bl	8003478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b006      	add	sp, #24
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <__libc_init_array>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	2600      	movs	r6, #0
 8003eac:	4d0c      	ldr	r5, [pc, #48]	; (8003ee0 <__libc_init_array+0x38>)
 8003eae:	4c0d      	ldr	r4, [pc, #52]	; (8003ee4 <__libc_init_array+0x3c>)
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	42a6      	cmp	r6, r4
 8003eb6:	d109      	bne.n	8003ecc <__libc_init_array+0x24>
 8003eb8:	2600      	movs	r6, #0
 8003eba:	f000 f821 	bl	8003f00 <_init>
 8003ebe:	4d0a      	ldr	r5, [pc, #40]	; (8003ee8 <__libc_init_array+0x40>)
 8003ec0:	4c0a      	ldr	r4, [pc, #40]	; (8003eec <__libc_init_array+0x44>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	42a6      	cmp	r6, r4
 8003ec8:	d105      	bne.n	8003ed6 <__libc_init_array+0x2e>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	00b3      	lsls	r3, r6, #2
 8003ece:	58eb      	ldr	r3, [r5, r3]
 8003ed0:	4798      	blx	r3
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7ee      	b.n	8003eb4 <__libc_init_array+0xc>
 8003ed6:	00b3      	lsls	r3, r6, #2
 8003ed8:	58eb      	ldr	r3, [r5, r3]
 8003eda:	4798      	blx	r3
 8003edc:	3601      	adds	r6, #1
 8003ede:	e7f2      	b.n	8003ec6 <__libc_init_array+0x1e>
 8003ee0:	08003f50 	.word	0x08003f50
 8003ee4:	08003f50 	.word	0x08003f50
 8003ee8:	08003f50 	.word	0x08003f50
 8003eec:	08003f54 	.word	0x08003f54

08003ef0 <memset>:
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	1882      	adds	r2, r0, r2
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d100      	bne.n	8003efa <memset+0xa>
 8003ef8:	4770      	bx	lr
 8003efa:	7019      	strb	r1, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	e7f9      	b.n	8003ef4 <memset+0x4>

08003f00 <_init>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr

08003f0c <_fini>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr
